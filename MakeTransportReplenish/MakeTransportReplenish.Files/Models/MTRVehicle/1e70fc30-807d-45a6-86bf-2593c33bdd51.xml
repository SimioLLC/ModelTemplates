<Fragment>
  <Lists />
  <PropertyDefinitions>
    <Categories>
      <Category Name="Transport Logic" Description="Transport Logic" />
      <Category Name="Travel Logic" Description="Travel Logic" />
      <Category Name="Routing Logic" Description="Routing Logic" />
      <Category Name="Resource Logic" Description="Resource Logic" InitiallyExpanded="False" />
      <Category Name="Reliability Logic" Description="Reliability Logic" InitiallyExpanded="False" />
      <Category Name="Financials" Description="Financials" InitiallyExpanded="False" />
      <Category Name="Financials/Transport Costs" Description="Transport Costs" InitiallyExpanded="False" />
      <Category Name="Financials/Resource Costs" Description="Resource Costs" InitiallyExpanded="False" />
      <Category Name="Add-On Process Triggers" Description="Add-On Process Triggers" InitiallyExpanded="False" />
      <Category Name="Population" Description="Population" InitiallyExpanded="False" />
      <Category Name="Advanced Options" Description="Advanced Options" InitiallyExpanded="False" />
      <Category Name="Advanced Options/Deprecated Properties" Description="Advanced Options/Deprecated Properties" InitiallyExpanded="False" />
    </Categories>
    <StringProperty Name="RiderAnimation" Category="Animation" DefaultValue="Sitting_Loop" NullString="null" />
    <EnumProperty Name="WorkerObjectType" ComplexityLevel="Advanced" Category="Transport Logic" DefaultValue="Specific" NullString="null" EnumType="ObjectSeizeType" />
    <ObjectInstanceProperty Name="WorkerName" ComplexityLevel="Advanced" Category="Transport Logic" DefaultValue="MTRVehicle.Driver" Required="False" NullString="null" FilterMode="Resources" LocationType="Cartesian">
      <Switch Property="WorkerObjectType" Value="Specific" />
    </ObjectInstanceProperty>
    <ListNameProperty Name="WorkerListName" ComplexityLevel="Advanced" Category="Transport Logic" Required="False" NullString="null" ListType="Object">
      <Switch Property="WorkerObjectType" Value="FromList" />
    </ListNameProperty>
    <EnumProperty Name="WorkerSelectionGoal" ComplexityLevel="Advanced" Category="Transport Logic" DefaultValue="Smallest Distance" Required="False" NullString="null" EnumType="SeizeSelectionGoal">
      <Switch Property="WorkerObjectType" Comparison="NotEqual" Value="ParentObject" />
      <Captions>
        <Caption Value="SmallestDistance" Display="Smallest Distance" />
        <Caption Value="LargestDistance" Display="Largest Distance" />
        <Caption Value="PreferredOrder" Display="Preferred Order" />
        <Caption Value="SmallestValue" Display="Smallest Value" />
        <Caption Value="LargestValue" Display="Largest Value" />
      </Captions>
    </EnumProperty>
    <ExpressionProperty Name="WorkerSelectionExpression" ComplexityLevel="Advanced" Category="Transport Logic" DefaultValue="0.0" Required="False" NullString="null" SupportForeign="True">
      <Switch Property="WorkerSelectionGoal" Value="SmallestValue, LargestValue" />
    </ExpressionProperty>
    <ElementProperty Name="AssignDriver" Category="Add-On Process Triggers" DefaultValue="MTRVehicle_AssignDriver" Required="False" NullString="null" ValueListFilter="UserExecutableProcessesOnly" Type="Process" />
    <ElementProperty Name="RideStationContentsChangeProcess" Category="Add-On Process Triggers" DefaultValue="MTRVehicle_RideStationContentsChange" Required="False" NullString="null" ValueListFilter="UserExecutableProcessesOnly" Type="Process" />
    <ElementProperty Name="DriverReleased" Category="Add-On Process Triggers" DefaultValue="MTRVehicle_DriverReleased" Required="False" NullString="null" ValueListFilter="UserExecutableProcessesOnly" Type="Process" />
    <ExpressionProperty Name="LogXZObservations" DefaultValue="LogXZObservations" NullString="null" />
    <ExpressionProperty Name="BatteryChargeRate" DisplayName="Battery Charge Rate" Description="Rate at which the AMR battery charges in battery % per hour." Category="Battery" DefaultValue="Equipment.BatteryChargeRate" NullString="null" />
    <ExpressionProperty Name="LowBatteryThreshold" DisplayName="Low Battery Threshold" Description="The threshold in percent battery life at which the AGV will return to the charging station. The AGV's battery remaining percentage is checked as soon as the AMR completes a task." Category="Battery" DefaultValue="Equipment.LowBatteryThreshold" NullString="null" />
    <ExpressionProperty Name="BatteryDischargeRate" DisplayName="Battery Discharge Rate" Description="Battery discharge rate in percent battery life per meter traveled." Category="Battery" DefaultValue="Equipment.BatteryDischargeRate" NullString="null" />
    <NodeProperty Name="InitialChargeNode" DisplayName="Initial Charge Node" Description="The node at which the AMR must be present for charging to begin. If left empty, the AGV will charge at its HomeNode." Category="Battery" DefaultValue="Equipment.InitialChargeNode" Required="False" NullString="null" ValidObjectType="Node" LocationType="Cartesian" />
    <ExpressionProperty Name="LogXZTimeInterval" DefaultValue="LogXZTimeInterval" NullString="null" UnitType="Time" />
    <ElementProperty Name="FindClosestStartNode" Category="Add-On Process Triggers" DefaultValue="MTRVehicle_FindClosestStartNode" Required="False" NullString="null" ValueListFilter="UserExecutableProcessesOnly" Type="Process" />
    <StringProperty Name="MQTTBroker" Category="MQTT" DefaultValue="Equipment.MQTTBroker" NullString="null" />
    <StringProperty Name="MQTTLocationTopic" Category="MQTT" DefaultValue="Equipment.MQTTLocationTopic" NullString="null" />
    <ExpressionProperty Name="ModelRunMode" DefaultValue="ModelRunMode" NullString="null" />
    <Overrides>
      <Override Name="ResourceIdleCostRate" DefaultValue="1" />
      <Override Name="ResourceUsageCostRate" DefaultValue="10" />
      <Override Name="LogResourceUsage" DefaultValue="True" />
      <Override Name="DisplayCategory" DefaultValue="Equipment.DisplayCategory" />
      <Override Name="WorkDayExceptions" DefaultValue="0 Rows" />
      <Override Name="WorkPeriodExceptions" DefaultValue="0 Rows" />
      <Override Name="DynamicSelectionRule" DefaultValue="None">
        <DefaultDynamicPropertyValues>
          <DefaultDynamicPropertyValue Name="IsRepeatGroup" Value="True" />
          <DefaultDynamicPropertyValue Name="DispatchingRules" Value="1 Row" />
          <DefaultDynamicPropertyValue Name="DispatchingRules[0].RepeatingDispatchingRule" Value="DispatchingRules.DispatchingRule" />
          <DefaultDynamicPropertyValue Name="DispatchingRules[0].RepeatingAttributeValueExpression" Value="DispatchingRules.AttributeValueExpression" />
          <DefaultDynamicPropertyValue Name="DispatchingRules[0].RepeatingCampaignValueExpression" Value="DispatchingRules.CampaignValueExpression" />
        </DefaultDynamicPropertyValues>
      </Override>
      <Override Name="CurrentSizeIndex" DefaultValue="MTRVehicle.Picture" />
      <Override Name="InitialDesiredSpeed" DefaultValue="Equipment.DesiredSpeed" />
      <Override Name="InitialNumberInSystem" DefaultValue="Equipment.InitialQuantity" />
      <Override Name="InitialTravelMode" DefaultValue="Free Space Only" />
      <Override Name="GanttVisibilityExpression" DefaultValue="False" />
      <Override Name="InitialRideCapacity" DefaultValue="Equipment.InitialRideCapacity" />
      <Override Name="TransportCostPerRider" DefaultValue="10" />
      <Override Name="ParkWhileBusy" DefaultValue="True" />
      <Override Name="TaskSelectionStrategy" DefaultValue="Smallest Priority" />
      <Override Name="LoadTime" DefaultValue=".1" />
      <Override Name="UnloadTime" DefaultValue=".1" />
      <Override Name="ParkToLoadUnload" DefaultValue="True" />
      <Override Name="MinimumDwellTimeType" DefaultValue="Equipment.DwellTypeType" />
      <Override Name="MinimumDwellTime" DefaultValue="Equipment.MinDwellTime" />
      <Override Name="MinimumDwellTimeExpirationEventName" DefaultValue="Equipment.DwellUntilEvent" />
      <Override Name="MinimumDwellTimeCondition" DefaultValue="Math.If(MTRVehicle.CurrentNode.Is.TransferNode, MTRVehicle.CurrentNode.TransferNode.RideOnTransporter, False) &amp;&amp; (MTRVehicle.RideStation.Capacity &gt; MTRVehicle.RideStationLoad) &amp;&amp; (MTRVehicle.ResourceState == 7)" />
      <Override Name="FreeSpaceSteeringBehavior" DefaultValue="Follow Network Path If Possible" />
      <Override Name="FreeSpaceSteeringAvoidCollisions" DefaultValue="True" />
      <Override Name="InitialNode" DefaultValue="Equipment.InitialNode" />
      <Override Name="IdleAction" DefaultValue="Park At Home" />
      <Override Name="OffShiftAction" DefaultValue="Park At Home" />
      <Override Name="FailureType" DefaultValue="Calendar Time Based" />
      <Override Name="UptimeBetweenFailures" DefaultValue="MTRVehicle_UptimeBetweenFailures" DefaultUnitSubType="3" />
      <Override Name="TimeToRepair" DefaultValue="MTRVehicle_TimeToRepair" />
      <Override Name="RunInitializedAddOnProcess" DefaultValue="MTRVehicle_RunInitialize" />
      <Override Name="AllocatedAddOnProcess" DefaultValue="MTRVehicle_Allocated" />
      <Override Name="ReleasedAddOnProcess" DefaultValue="MTRVehicle_Released" />
      <Override Name="FailedAddOnProcess" DefaultValue="MTRVehicle_Failed" />
      <Override Name="RepairedAddOnProcess" DefaultValue="MTRVehicle_Repaired" />
      <Override Name="EnteredNodeAddOnProcess" DefaultValue="MTRVehicle_EnteredNode" />
      <Override Name="UnloadedAddOnProcess" DefaultValue="MTRVehicle_Unloaded" />
      <Override Name="EvaluatingTransportRequestAddOnProcess" DefaultValue="MTRVehicle_EvaluatingTransportRequest" />
    </Overrides>
  </PropertyDefinitions>
  <States>
    <ElementReferenceState Name="Driver" ElementType="Object" />
    <StringState Name="PhaseKey" />
    <BooleanState Name="OperatorRequired" />
    <DiscreteState Name="CurrentX" />
    <DiscreteState Name="CurrentZ" />
    <LevelState Name="BatteryRemaining" InitialValue="100" />
    <BooleanState Name="ChargeRequired" />
    <ElementReferenceState Name="CurrentChargeNode" ElementType="Node" />
    <DiscreteState Name="DistanceToDest" />
    <ElementReferenceState Name="ClosestStartNode" ElementType="Node" />
    <IntegerState Name="Picture" />
    <DiscreteState Name="RealX" />
    <DiscreteState Name="RealZ" />
  </States>
  <Events>
    <Event Name="DriverArrived" Description="Fires when a seized driver arrives to the vehicle's node location." />
    <Event Name="IsFull" />
  </Events>
  <UsedObjects>
    <UsedObject Name="ModelEntity" />
  </UsedObjects>
  <Elements>
    <Element Type="Station" Name="DriverStation" Scope="Public">
      <Properties>
        <Property Name="EntryDynamicSelectionRule">
          <Value>None</Value>
        </Property>
        <Property Name="RedirectLocationType">Station</Property>
        <Property Name="CostPerUse" Units="USD">0.0</Property>
        <Property Name="HoldingCostRate" Units="USD per Hour">0.0</Property>
      </Properties>
    </Element>
    <Element Type="Monitor" Name="RideStationContentsChange" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>RideStation.Contents</Value>
        </Property>
        <Property Name="TriggeredProcessName">
          <Value>RideStationContentsChangeProcess</Value>
        </Property>
      </Properties>
    </Element>
    <Element Type="Timer" Name="LogXZTimeIntervalTimer" Scope="Public">
      <Properties>
        <Property Name="TimeInterval" Units="Minutes">LogXZTimeInterval</Property>
      </Properties>
    </Element>
    <Element Type="StateStatistic" Name="CurrentXSS" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>CurrentX</Value>
        </Property>
        <Property Name="LogObservations">LogXZObservations</Property>
      </Properties>
    </Element>
    <Element Type="StateStatistic" Name="CurrentZSS" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>CurrentZ</Value>
        </Property>
        <Property Name="LogObservations">LogXZObservations</Property>
      </Properties>
    </Element>
    <Element Type="Monitor" Name="MovementRateChanged" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>Movement.Rate</Value>
        </Property>
        <Property Name="TriggeredProcessName">
          <Value>OnMovementRateChanged</Value>
        </Property>
      </Properties>
    </Element>
    <Element Type="Monitor" Name="BatteryRemaining_Charge" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>BatteryRemaining</Value>
        </Property>
        <Property Name="MonitorType">CrossingStateChange</Property>
        <Property Name="InitialThresholdValue">100</Property>
        <Property Name="TriggeredProcessName">
          <Value>FullChargeDetected</Value>
        </Property>
      </Properties>
    </Element>
    <Element Type="Monitor" Name="BatteryRemaining_Discharge" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>BatteryRemaining</Value>
        </Property>
        <Property Name="MonitorType">CrossingStateChange</Property>
        <Property Name="CrossingDirection">Negative</Property>
        <Property Name="InitialThresholdValue">LowBatteryThreshold</Property>
        <Property Name="TriggeredProcessName">
          <Value>CheckForLowBattery</Value>
        </Property>
      </Properties>
    </Element>
    <Element Type="StateStatistic" Name="BatteryRemainingSS" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>BatteryRemaining</Value>
        </Property>
      </Properties>
    </Element>
  </Elements>
  <Processes>
    <Process Name="OnRunInitialized" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnRunInitialized" BeginStepID="9">
      <Properties>
        <Property Name="TokenActionOnAssociatedObjectTransferRequested">EndProcess</Property>
      </Properties>
      <Steps>
        <Step Type="Park" Name="AtInitialNode" ID="2">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">InitialNode</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="6" />
          <Exit Name="Failed" Type="Alternate" NextID="6" />
        </Step>
        <Step Type="Decide" Name="IfUnpark" ExclusionExpression="Math.If((RoutingType == List.VehicleRoutingType.FixedRoute) || (IdleAction == List.VehicleIdleAction.Roam), 0, 2)" ID="3">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="8" />
        </Step>
        <Step Type="UnPark" Name="Vehicle" ID="4">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
          </Properties>
        </Step>
        <Step Type="Execute" Name="RunInitializedAddOnProcess" ID="5">
          <Properties>
            <Property Name="ProcessName">
              <Value>RunInitializedAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="2" />
        </Step>
        <Step Type="Decide" Name="IfOnShift" ID="6">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState!=List.ResourceStateName.OffShift</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="7" />
        </Step>
        <Step Type="PlanVisit" Name="InitialMoveOrTransportRequests" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.OnDemand, 0, 2)" ID="7">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="7" />
          <Exit Name="Failed" Type="Alternate" NextID="3" />
        </Step>
        <Step Type="Execute" Name="SeizeOperatpr" Description="Seize and move the operator that is required to move the vehicle." Color="ff0000" ID="8">
          <Properties>
            <Property Name="ProcessName">
              <Value>SeizeOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Decide" Name="ChargeNode.HasValue" Color="92cddc" ID="9">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">InitialChargeNode.HasValue || InitialNode.HasValue</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="13" />
          <Exit Name="False" Type="Alternate" NextID="10" />
        </Step>
        <Step Type="Create" Name="NewToken" Color="92cddc" ID="10">
          <Properties>
            <Property Name="CreateType">NewToken</Property>
            <Property Name="TokenAssociatedObject">MTRVehicle</Property>
            <Property Name="TokenContextObject">null</Property>
          </Properties>
          <Exit Name="Original" Type="Primary" NextID="5" />
          <Exit Name="Created" Type="Alternate" NextID="11" />
        </Step>
        <Step Type="Delay" Name="Epsilon" Color="92cddc" ID="11">
          <Properties>
            <Property Name="DelayTime">Math.Epsilon</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="12" />
        </Step>
        <Step Type="Assign" Name="CurrentNode" Color="92cddc" ID="12">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentChargeNode</Value>
            </Property>
            <Property Name="NewValue">CurrentNode</Property>
          </Properties>
        </Step>
        <Step Type="Assign" Name="ChargeNode" Color="92cddc" ID="13">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentChargeNode</Value>
            </Property>
            <Property Name="NewValue">Math.If(InitialChargeNode.HasValue, InitialChargeNode, InitialNode.HasValue, InitialNode, Nothing)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnCreated" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnCreated" BeginStepID="13">
      <Properties />
      <Steps>
        <Step Type="Seize" Name="Vehicle" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="2">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceSeizes">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">ParentObject</Property>
                  <Property Name="SelectionGoal"></Property>
                  <Property Name="SelectionValueExpression"></Property>
                  <Property Name="RecordResourceCost">False</Property>
                  <Property Name="PerUseCostAccrualMethod"></Property>
                  <Property Name="RandomNumberStream"></Property>
                  <Property Name="SkipSeizeCondition">ResourceState!=List.ResourceStateName.Idle</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="SetRow" Name="ToRouteSequence" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="3">
          <Properties>
            <Property Name="ObjectType">ParentObject</Property>
            <Property Name="TableName">RouteSequence</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="SetNode" Name="ToFirstDestination" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="4">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="DestinationType">BySequence</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Assign" Name="ToEnableFailures" ExclusionExpression="FailureType == List.VehicleFailureType.NoFailures" ID="5">
          <Properties>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CalendarTimeBasedFailures.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Run.RandomnessDisabled==False</Property>
                  <Property Name="AssignmentsSkipAssignmentCondition">FailureType!=List.VehicleFailureType.CalendarTimeBased</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>EventCountBasedFailures.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Run.RandomnessDisabled==False</Property>
                  <Property Name="AssignmentsSkipAssignmentCondition">FailureType!=List.VehicleFailureType.EventCountBased</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Subscribe" Name="ToFailureEvents" ExclusionExpression="FailureType == List.VehicleFailureType.NoFailures" ID="6">
          <Properties>
            <Property Name="EventName">CalendarTimeBasedFailures.Event</Property>
            <Property Name="ProcessName">
              <Value>FailureOccurrenceLogic</Value>
            </Property>
            <Property Name="Events">
              <Rows>
                <Properties>
                  <Property Name="EventsEventName">EventCountBasedFailures.Event</Property>
                  <Property Name="EventsProcessName">
                    <Value>FailureOccurrenceLogic</Value>
                  </Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Notify" Name="IfInvalidCapacity" ID="7">
          <Properties>
            <Property Name="NotificationType">Warning</Property>
            <Property Name="MessageHeading">"Invalid resource capacity detected"</Property>
            <Property Name="MessageContent">"Invalid capacity value '" + String.FromReal(Capacity) + "' assigned to resource '" + Name + "'. The value cannot be greater than 1.

The resource's capacity will be automatically adjusted to the maximum allowable value. However, this warning may indicate a problem in the modeled logic."</Property>
            <Property Name="NotifyCondition">Capacity &gt; 1</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Assign" Name="OnCreatedAssignments" ID="8">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnEvaluatingRiderReservation.Enabled</Value>
            </Property>
            <Property Name="NewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CurrentCapacity</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">1</Property>
                  <Property Name="AssignmentsSkipAssignmentCondition">CurrentCapacity &lt;= 1</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>HomeNode</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">InitialNode</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MinimumDwellTimeExpirationTimer.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">True</Property>
                  <Property Name="AssignmentsSkipAssignmentCondition">MinimumDwellTimeType!=List.VehicleMinimumDwellTimeType.SpecificTime</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Decide" Name="IfOnShift" ExclusionExpression="Math.If(OnShiftAddOnProcess.HasValue, 0, 2)" ID="9">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState!=List.ResourceStateName.OffShift</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="12" />
          <Exit Name="False" Type="Alternate" NextID="10" />
        </Step>
        <Step Type="Decide" Name="IfOffShift" ExclusionExpression="Math.If(OffShiftAddOnProcess.HasValue, 0, 2)" ID="10">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.OffShift</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="11" />
        </Step>
        <Step Type="Execute" Name="OffShiftAddOnProcess" ID="11">
          <Properties>
            <Property Name="ProcessName">
              <Value>OffShiftAddOnProcess</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Execute" Name="OnShiftAddOnProcess" ID="12">
          <Properties>
            <Property Name="ProcessName">
              <Value>OnShiftAddOnProcess</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Execute" Name="RecordCurrentXandZ" ID="13">
          <Properties>
            <Property Name="ProcessName">
              <Value>RecordCurrentXandZ</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="2" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnCapacityAllocated" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnCapacityAllocated" BeginStepID="2">
      <Properties />
      <Steps>
        <Step Type="Assign" Name="ResourceState" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ResourceState</Value>
            </Property>
            <Property Name="NewValue">Math.If(Failure.Active, List.ResourceStateName.Failed, ResourceOwners.Contains(ParentObject), List.ResourceStateName.Transporting, List.ResourceStateName.Busy)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="OnCapacityAllocatedAssignments" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnEvaluatingRiderReservation.Enabled</Value>
            </Property>
            <Property Name="NewValue">Math.If(ResourceState==List.ResourceStateName.Transporting, RideStation.Capacity &gt; RideStationLoad, False)</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.If(ResourceState==List.ResourceStateName.Transporting, RideStation.Capacity &gt; RideStationLoad, False)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">False</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">False</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Transporting</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Transporting</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Fire" Name="AllocatedEvent" ID="4">
          <Properties>
            <Property Name="EventName">Allocated</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Execute" Name="AllocatedAddOnProcess" ID="5">
          <Properties>
            <Property Name="ProcessName">
              <Value>AllocatedAddOnProcess</Value>
            </Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="OnCapacityChanged" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnCapacityChanged" BeginStepID="2">
      <Properties>
        <Property Name="TokenClassName">ChargeToken</Property>
      </Properties>
      <Steps>
        <Step Type="Decide" Name="IfValidCapacity" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Capacity&lt;=1</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="5" />
          <Exit Name="False" Type="Alternate" NextID="3" />
        </Step>
        <Step Type="Notify" Name="InvalidCapacity" ID="3">
          <Properties>
            <Property Name="NotificationType">Warning</Property>
            <Property Name="MessageHeading">"Invalid resource capacity detected"</Property>
            <Property Name="MessageContent">"Invalid capacity value '" + String.FromReal(Capacity) + "' assigned to resource '" + Name + "'. The value cannot be greater than 1.

The resource's capacity will be automatically adjusted to the maximum allowable value. However, this warning may indicate a problem in the modeled logic."</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Assign" Name="CurrentCapacity" ID="4">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnCapacityChanged.Enabled</Value>
            </Property>
            <Property Name="NewValue">False</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CurrentCapacity</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">1</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnCapacityChanged.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">True</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Decide" Name="IfOnShift" ID="5">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Capacity==1</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="10" />
          <Exit Name="False" Type="Alternate" NextID="6" />
        </Step>
        <Step Type="Decide" Name="IfOffShift" ID="6">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Capacity==0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="ResourceState" ID="7">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ResourceState</Value>
            </Property>
            <Property Name="NewValue">Math.If((ResourceOwners==0)||(!ResourceOwners.Contains(ParentObject)&amp;&amp;ResourceOwners.AllProcessingSuspended), List.ResourceStateName.OffShift, Failure.Active&amp;&amp;(ResourceOwners.Contains(ParentObject)||(VisitRequestQueue&gt;0)), List.ResourceStateName.Failed, ResourceOwners.Contains(ParentObject), List.ResourceStateName.OffShiftTransporting, List.ResourceStateName.OffShiftBusy)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Assign" Name="OffShiftAssignments" ID="8">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnEvaluatingRiderReservation.Enabled</Value>
            </Property>
            <Property Name="NewValue">False</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">False</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">False</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">False</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">(ResourceState==List.ResourceStateName.OffShiftTransporting)&amp;&amp;(VisitRequestQueue.NumberWaiting&gt;0)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">(ResourceState==List.ResourceStateName.OffShiftTransporting)&amp;&amp;(VisitRequestQueue.NumberWaiting&gt;0)</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="32" />
        </Step>
        <Step Type="Execute" Name="OffShiftAddOnProcess" ID="9">
          <Properties>
            <Property Name="ProcessName">
              <Value>OffShiftAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="33" />
        </Step>
        <Step Type="Assign" Name="ResourceState" ID="10">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ResourceState</Value>
            </Property>
            <Property Name="NewValue">Math.If(Failure.Active, Math.If((ResourceOwners&gt;0)&amp;&amp;!ResourceOwners.Contains(ParentObject)&amp;&amp;(VisitRequestQueue==0), List.ResourceStateName.FailedBusy, List.ResourceStateName.Failed), ResourceState)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="11" />
        </Step>
        <Step Type="Assign" Name="OnShiftAssignments" ID="11">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnEvaluatingRiderReservation.Enabled</Value>
            </Property>
            <Property Name="NewValue">ResourceState==List.ResourceStateName.Idle || (ResourceState==List.ResourceStateName.Transporting &amp;&amp; (RideStation.Capacity &gt; RideStationLoad))</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle || (ResourceState==List.ResourceStateName.Transporting &amp;&amp; (RideStation.Capacity &gt; RideStationLoad))</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingSeizeRequest.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle || ResourceState==List.ResourceStateName.Transporting</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderAtPickup.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle || ResourceState==List.ResourceStateName.Transporting</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="31" />
        </Step>
        <Step Type="Execute" Name="OnShiftAddOnProcess" ID="12">
          <Properties>
            <Property Name="ProcessName">
              <Value>OnShiftAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="13" />
        </Step>
        <Step Type="Delay" Name="Epsilon" ID="13">
          <Properties>
            <Property Name="DelayTime">Math.Epsilon</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="14" />
        </Step>
        <Step Type="Allocate" Name="Vehicle" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.OnDemand, 0, 2)" ID="14">
          <Properties>
            <Property Name="ResourceType">ParentObject</Property>
          </Properties>
          <Exit Name="Failed" Type="Alternate" NextID="15" />
        </Step>
        <Step Type="PlanVisit" Name="NewTransportRequests" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.OnDemand, 0, 2)" ID="15">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="15" />
          <Exit Name="Failed" Type="Alternate" NextID="16" />
        </Step>
        <Step Type="Decide" Name="IfIdle" ID="16">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.Idle</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="17" />
          <Exit Name="False" Type="Alternate" NextID="28" />
        </Step>
        <Step Type="Decide" Name="IfIdleAction" ID="17">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Math.If(IdleAction==List.VehicleIdleAction.GoToHome, ((CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing))||((CurrentNode!=Nothing)&amp;&amp;(CurrentNode!=HomeNode)), IdleAction==List.VehicleIdleAction.ParkAtNode, (CurrentNode!=Nothing)&amp;&amp;!IsParked, IdleAction==List.VehicleIdleAction.ParkAtHome, ((CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing))||((CurrentNode!=Nothing)&amp;&amp;(CurrentNode!=HomeNode))||((CurrentNode==HomeNode)&amp;&amp;!IsParked), False)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="22" />
        </Step>
        <Step Type="Decide" Name="IfOffShift" ID="18">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.OffShift</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="19" />
        </Step>
        <Step Type="Decide" Name="IfOffShiftAction" ID="19">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Math.If(OffShiftAction==List.VehicleOffShiftAction.GoToHome, ((CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing))||((CurrentNode!=Nothing)&amp;&amp;(CurrentNode!=HomeNode)), OffShiftAction==List.VehicleOffShiftAction.ParkAtNode, (CurrentNode!=Nothing)&amp;&amp;!IsParked, OffShiftAction==List.VehicleOffShiftAction.ParkAtHome, ((CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing))||((CurrentNode!=Nothing)&amp;&amp;(CurrentNode!=HomeNode))||((CurrentNode==HomeNode)&amp;&amp;!IsParked), False)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="24" />
        </Step>
        <Step Type="Fire" Name="RemainInPlaceEndedEvent" ID="20">
          <Properties>
            <Property Name="EventName">RemainInPlaceEnded</Property>
          </Properties>
        </Step>
        <Step Type="Fire" Name="RemainInPlaceEndedEvent" ID="21">
          <Properties>
            <Property Name="EventName">RemainInPlaceEnded</Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="22">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="40" />
          <Exit Name="False" Type="Alternate" NextID="23" />
        </Step>
        <Step Type="Decide" Name="IfUnpark" ID="23">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked &amp;&amp; (OnVisitingNode.TokensInProcess==0)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="38" />
          <Exit Name="False" Type="Alternate" NextID="20" />
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="24">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="35" />
          <Exit Name="False" Type="Alternate" NextID="25" />
        </Step>
        <Step Type="Decide" Name="IfUnpark" ID="25">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked &amp;&amp; (OnVisitingNode.TokensInProcess==0)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="39" />
          <Exit Name="False" Type="Alternate" NextID="21" />
        </Step>
        <Step Type="UnPark" Name="Vehicle" ID="26">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
          </Properties>
        </Step>
        <Step Type="UnPark" Name="Vehicle" ID="27">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="IfStartingFixedRoute" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.OnDemand, 2, 0)" ID="28">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(RideStation.Contents==0)&amp;&amp;(Sequence.DestinationNodes.FirstItem!=Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="29" />
          <Exit Name="False" Type="Alternate" NextID="20" />
        </Step>
        <Step Type="SetRow" Name="ToRouteSequence" ID="29">
          <Properties>
            <Property Name="ObjectType">ParentObject</Property>
            <Property Name="TableName">RouteSequence</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="30" />
        </Step>
        <Step Type="SetNode" Name="ToFirstDestination" ID="30">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="DestinationType">BySequence</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="34" />
        </Step>
        <Step Type="Seize" Name="Vehicle" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="31">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceSeizes">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">ParentObject</Property>
                  <Property Name="MovePriority">False</Property>
                  <Property Name="SkipSeizeCondition">Capacity.Allocated&gt;0</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="12" />
        </Step>
        <Step Type="Release" Name="Vehicle" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="32">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceReleases">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">ParentObject</Property>
                  <Property Name="UnitsPerResource">(VisitRequestQueue.NumberWaiting==0)&amp;&amp;(NumberRiders.Loading==0)&amp;&amp;(RideStation.Contents==0)</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Decide" Name="IfDwellingForMinimumDwellTime" ExclusionExpression="Math.If(MinimumDwellTimeType == List.VehicleMinimumDwellTimeType.NoRequirement, 2, 0)" ID="33">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">!MinimumDwellTimeExpired</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="21" />
          <Exit Name="False" Type="Alternate" NextID="18" />
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="34">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="40" />
          <Exit Name="False" Type="Alternate" NextID="23" />
        </Step>
        <Step Type="Decide" Name="IfHoming" ID="35">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">((OffShiftAction==List.VehicleOffShiftAction.GoToHome)||(OffShiftAction==List.VehicleOffShiftAction.ParkAtHome))&amp;&amp;(HomeNode!=Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="40" />
        </Step>
        <Step Type="SetNode" Name="ToHomeNode" ID="36">
          <Properties>
            <Property Name="NodeName">ChargeToken.Destination</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="42" />
        </Step>
        <Step Type="Transfer" Name="ToDestinationNode" ID="37">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">DestinationNode</Property>
          </Properties>
        </Step>
        <Step Type="Execute" Name="SeizeOperatpr" Description="Seize and move the operator that is required to move the vehicle." Color="ff0000" ID="38">
          <Properties>
            <Property Name="ProcessName">
              <Value>SeizeOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="26" />
        </Step>
        <Step Type="Execute" Name="SeizeOperatpr" Description="Seize and move the operator that is required to move the vehicle." Color="ff0000" ExclusionExpression="OperatorRequired == False" ID="39">
          <Properties>
            <Property Name="ProcessName">
              <Value>SeizeOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="27" />
        </Step>
        <Step Type="Decide" Name="IfHoming" Color="92cddc" ID="40">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">((IdleAction==List.VehicleIdleAction.GoToHome)||(IdleAction==List.VehicleIdleAction.ParkAtHome) || (CurrentChargeNode != Nothing &amp;&amp; ChargeRequired) )&amp;&amp;(HomeNode!=Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="41" />
        </Step>
        <Step Type="Assign" Name="DestinationNode" Color="92cddc" ID="41">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ChargeToken.Destination</Value>
            </Property>
            <Property Name="NewValue">Math.If( CurrentChargeNode != Nothing &amp;&amp; ChargeRequired, CurrentChargeNode, HomeNode )</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="36" />
        </Step>
        <Step Type="Execute" Name="FreespaceMovementExecution" Color="c4bd97" ID="42">
          <Properties>
            <Property Name="ProcessName">
              <Value>FreespaceMovementExecution</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="43" />
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="43">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="37" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnVisitingNode" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Entity.OnVisitingNode" BeginStepID="2">
      <Properties>
        <Property Name="TokenActionOnAssociatedObjectTransferRequested">EndProcess</Property>
      </Properties>
      <Steps>
        <Step Type="Execute" Name="EnteredNodeAddOnProcess" ID="2">
          <Properties>
            <Property Name="ProcessName">
              <Value>EnteredNodeAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Decide" Name="IfNotVisitingNode" ID="3">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Math.If(IgnoreVisitingCurrentNode, True, ResourceState==List.ResourceStateName.Idle, False, ResourceState==List.ResourceStateName.OffShift, ((OffShiftAction==List.VehicleOffShiftAction.GoToHome)||(OffShiftAction==List.VehicleOffShiftAction.ParkAtHome))&amp;&amp;(HomeNode!=Nothing)&amp;&amp;(DestinationNode==HomeNode)&amp;&amp;(CurrentNode!=HomeNode),(DestinationNode!=Nothing)&amp;&amp;(CurrentNode!=DestinationNode), True, False)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="39" />
          <Exit Name="False" Type="Alternate" NextID="4" />
        </Step>
        <Step Type="Decide" Name="IfBusy" ID="4">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(ResourceState==List.ResourceStateName.Busy)||(ResourceState==List.ResourceStateName.OffShiftBusy)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="31" />
          <Exit Name="False" Type="Alternate" NextID="34" />
        </Step>
        <Step Type="Arrive" Name="AtDestination" ID="5">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="41" />
        </Step>
        <Step Type="Wait" Name="UntilRemainInPlaceEnded" ID="6">
          <Properties>
            <Property Name="EventName">RemainInPlaceEnded</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Delay" Name="Epsilon" ID="7">
          <Properties>
            <Property Name="DelayTime">Math.Epsilon</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Execute" Name="ExitingNodeAddOnProcess" ID="8">
          <Properties>
            <Property Name="ProcessName">
              <Value>ExitingNodeAddOnProcess</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Dropoff" Name="Rider" ID="9">
          <Properties>
            <Property Name="TransporterType">ParentObject</Property>
            <Property Name="UnloadTime">UnloadTime</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="10" />
          <Exit Name="Failed" Type="Alternate" NextID="60" />
        </Step>
        <Step Type="Decide" Name="IfWaitUntilRiderUnloaded" ExclusionExpression="Math.If(!UnloadedAddOnProcess.HasValue, 2, 0)" ID="10">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">OnRiderUnloaded.TokensInProcess &gt; 0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="11" />
          <Exit Name="False" Type="Alternate" NextID="9" />
        </Step>
        <Step Type="Wait" Name="UntilRiderUnloaded" ExclusionExpression="!UnloadedAddOnProcess.HasValue" ID="11">
          <Properties>
            <Property Name="EventName">RiderUnloaded</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Pickup" Name="Rider" ID="12">
          <Properties>
            <Property Name="TransporterType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
            <Property Name="LoadTime">LoadTime</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="13" />
          <Exit Name="Failed" Type="Alternate" NextID="53" />
        </Step>
        <Step Type="Decide" Name="IfWaitUntilRiderLoaded" ExclusionExpression="Math.If(!LoadedAddOnProcess.HasValue, 2, 0)" ID="13">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">OnRiderLoaded.TokensInProcess &gt; 0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="14" />
          <Exit Name="False" Type="Alternate" NextID="12" />
        </Step>
        <Step Type="Wait" Name="UntilRiderLoaded" ExclusionExpression="!LoadedAddOnProcess.HasValue" ID="14">
          <Properties>
            <Property Name="EventName">RiderLoaded</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="12" />
        </Step>
        <Step Type="Decide" Name="IfFixedRouting" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.FixedRoute, 1, 2)" ID="15">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">RoutingType==List.VehicleRoutingType.FixedRoute</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="48" />
          <Exit Name="False" Type="Alternate" NextID="17" />
        </Step>
        <Step Type="SetNode" Name="ToNextSequenceDestination" ID="16">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="DestinationType">BySequence</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="39" />
        </Step>
        <Step Type="SelectDropoff" Name="NextTransportDropoff" ID="17">
          <Properties>
            <Property Name="TransporterType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="39" />
          <Exit Name="Failed" Type="Alternate" NextID="18" />
        </Step>
        <Step Type="SelectVisit" Name="ToAcceptedDestination" ID="18">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="59" />
          <Exit Name="Failed" Type="Alternate" NextID="19" />
        </Step>
        <Step Type="Release" Name="Vehicle" ID="19">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceReleases">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">ParentObject</Property>
                  <Property Name="QuantityType">All</Property>
                </Properties>
              </Rows>
            </Property>
            <Property Name="ImmediatelyTryAllocate">False</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="20" />
        </Step>
        <Step Type="Delay" Name="Epsilon" ID="20">
          <Properties>
            <Property Name="DelayTime">Math.Epsilon</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="29" />
        </Step>
        <Step Type="PlanVisit" Name="NewTransportRequests" ID="21">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="21" />
          <Exit Name="Failed" Type="Alternate" NextID="22" />
        </Step>
        <Step Type="Decide" Name="IfIdle" ID="22">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.Idle</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="23" />
          <Exit Name="False" Type="Alternate" NextID="39" />
        </Step>
        <Step Type="Decide" Name="IfParking" ExclusionExpression="Math.If(IdleAction == List.VehicleIdleAction.ParkAtNode, 1, IdleAction != List.VehicleIdleAction.ParkAtHome, 2, 0)" ID="23">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(HomeNode==CurrentNode)||(HomeNode==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="38" />
          <Exit Name="False" Type="Alternate" NextID="24" />
        </Step>
        <Step Type="Decide" Name="IfHoming" ExclusionExpression="Math.If(IdleAction == List.VehicleIdleAction.ParkAtHome, 1, IdleAction != List.VehicleIdleAction.GoToHome, 2, 0)" ID="24">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(HomeNode!=Nothing)&amp;&amp;(HomeNode!=CurrentNode)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="26" />
          <Exit Name="False" Type="Alternate" NextID="25" />
        </Step>
        <Step Type="Decide" Name="IfRoaming" ExclusionExpression="Math.If(IdleAction == List.VehicleIdleAction.Roam, 1, 2)" ID="25">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IdleAction==List.VehicleIdleAction.Roam</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="39" />
          <Exit Name="False" Type="Alternate" NextID="28" />
        </Step>
        <Step Type="SetNode" Name="ToHome" ID="26">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">HomeNode</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="39" />
        </Step>
        <Step Type="Park" Name="AtCurrentNode" ID="27">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">CurrentNode</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="65" />
        </Step>
        <Step Type="Wait" Name="UntilRemainInPlaceEnded" ID="28">
          <Properties>
            <Property Name="EventName">RemainInPlaceEnded</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Decide" Name="IfIdle" ID="29">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.Idle</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="21" />
          <Exit Name="False" Type="Alternate" NextID="45" />
        </Step>
        <Step Type="Execute" Name="ExitingNodeAddOnProcess" ID="30">
          <Properties>
            <Property Name="ProcessName">
              <Value>ExitingNodeAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="27" />
        </Step>
        <Step Type="Decide" Name="IfParked" ExclusionExpression="!ParkWhileBusy" ID="31">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="5" />
          <Exit Name="False" Type="Alternate" NextID="32" />
        </Step>
        <Step Type="Execute" Name="ExitingNodeAddOnProcess" ID="32">
          <Properties>
            <Property Name="ProcessName">
              <Value>ExitingNodeAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="33" />
        </Step>
        <Step Type="Park" Name="AtCurrentNode" ID="33">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">CurrentNode</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="63" />
        </Step>
        <Step Type="Decide" Name="IfLoadingUnloading" ID="34">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Math.If(ResourceState==List.ResourceStateName.OffShift, False, (ResourceState==List.ResourceStateName.Transporting)||(ResourceState==List.ResourceStateName.OffShiftTransporting), True, Node.RidePickupQueue.NumberWaiting&gt;0)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="50" />
          <Exit Name="False" Type="Alternate" NextID="29" />
        </Step>
        <Step Type="Decide" Name="IfParking" ExclusionExpression="Math.If(ParkToLoadUnload, 0, 2)" ID="35">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ParkToLoadUnload &amp;&amp; !IsParked</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="36" />
          <Exit Name="False" Type="Alternate" NextID="9" />
        </Step>
        <Step Type="Execute" Name="ExitingNodeAddOnProcess" ID="36">
          <Properties>
            <Property Name="ProcessName">
              <Value>ExitingNodeAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="37" />
        </Step>
        <Step Type="Park" Name="AtCurrentNode" ID="37">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">CurrentNode</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="64" />
        </Step>
        <Step Type="Decide" Name="IfParked" ID="38">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="28" />
          <Exit Name="False" Type="Alternate" NextID="30" />
        </Step>
        <Step Type="Decide" Name="IfParked" ID="39">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="43" />
          <Exit Name="False" Type="Alternate" NextID="44" />
        </Step>
        <Step Type="UnPark" Name="Vehicle" ID="40">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
          </Properties>
        </Step>
        <Step Type="SelectVisit" Name="ToAcceptedDestination" ID="41">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="3" />
          <Exit Name="Failed" Type="Alternate" NextID="6" />
        </Step>
        <Step Type="Decide" Name="IfIdleOrOffShift" ID="42">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(ResourceState==List.ResourceStateName.Idle)||(ResourceState==List.ResourceStateName.OffShift)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="28" />
          <Exit Name="False" Type="Alternate" NextID="3" />
        </Step>
        <Step Type="Assign" Name="IgnoreVisitingCurrentNodeFlag" ID="43">
          <Properties>
            <Property Name="StateVariableName">
              <Value>IgnoreVisitingCurrentNode</Value>
            </Property>
            <Property Name="NewValue">CurrentNode!=DestinationNode</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="62" />
        </Step>
        <Step Type="Assign" Name="IgnoreVisitingCurrentNodeFlag" ID="44">
          <Properties>
            <Property Name="StateVariableName">
              <Value>IgnoreVisitingCurrentNode</Value>
            </Property>
            <Property Name="NewValue">False</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Decide" Name="IfOffShift" ID="45">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.OffShift</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="46" />
          <Exit Name="False" Type="Alternate" NextID="3" />
        </Step>
        <Step Type="Decide" Name="IfParking" Color="8db3e2" ExclusionExpression="Math.If(OffShiftAction == List.VehicleOffShiftAction.ParkAtNode, 1, OffShiftAction != List.VehicleOffShiftAction.ParkAtHome, 2, 0)" ID="46">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(((HomeNode==CurrentNode) || (HomeNode==Nothing)) &amp;&amp; !ChargeRequired) || (ChargeRequired &amp;&amp; CurrentNode == CurrentChargeNode)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="38" />
          <Exit Name="False" Type="Alternate" NextID="66" />
        </Step>
        <Step Type="Decide" Name="IfHoming" ExclusionExpression="Math.If(OffShiftAction == List.VehicleOffShiftAction.ParkAtHome, 1, OffShiftAction != List.VehicleOffShiftAction.GoToHome, 2, 0)" ID="47">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(HomeNode!=Nothing)&amp;&amp;(HomeNode!=CurrentNode)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="26" />
          <Exit Name="False" Type="Alternate" NextID="28" />
        </Step>
        <Step Type="Release" Name="Vehicle" ID="48">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceReleases">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">ParentObject</Property>
                  <Property Name="UnitsPerResource">(ResourceState==List.ResourceStateName.OffShiftTransporting)&amp;&amp;(RideStation.Contents==0)</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="49" />
        </Step>
        <Step Type="Decide" Name="IfOffShift" ID="49">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.OffShift</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="46" />
          <Exit Name="False" Type="Alternate" NextID="58" />
        </Step>
        <Step Type="Assign" Name="MinimumDwellTimeExpiredFlag" ExclusionExpression="MinimumDwellTimeType == List.VehicleMinimumDwellTimeType.NoRequirement" ID="50">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MinimumDwellTimeExpired</Value>
            </Property>
            <Property Name="NewValue">False</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="51" />
        </Step>
        <Step Type="Fire" Name="MinimumDwellTimeExpirationResetEvent" ExclusionExpression="MinimumDwellTimeType != List.VehicleMinimumDwellTimeType.SpecificTime" ID="51">
          <Properties>
            <Property Name="EventName">MinimumDwellTimeExpirationReset</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="52" />
        </Step>
        <Step Type="Subscribe" Name="ToMinimumDwellTimeExpirationEvent" ExclusionExpression="MinimumDwellTimeType != List.VehicleMinimumDwellTimeType.DwellUntilEvent" ID="52">
          <Properties>
            <Property Name="EventName">MinimumDwellTimeExpirationEventName</Property>
            <Property Name="ProcessName">
              <Value>OnMinimumDwellTimeExpired</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="35" />
        </Step>
        <Step Type="Decide" Name="IfMinimumDwellTimeExpired" ExclusionExpression="MinimumDwellTimeType == List.VehicleMinimumDwellTimeType.NoRequirement" ID="53">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">MinimumDwellTimeExpired</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="15" />
          <Exit Name="False" Type="Alternate" NextID="54" />
        </Step>
        <Step Type="Decide" Name="IfMinimumDwellTimeCondition" ID="54">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Math.If(MinimumDwellTimeCondition.HasValue, MinimumDwellTimeCondition, True)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="61" />
          <Exit Name="False" Type="Alternate" NextID="56" />
        </Step>
        <Step Type="Wait" Name="UntilRemainInPlaceEnded" ID="55">
          <Properties>
            <Property Name="EventName">RemainInPlaceEnded</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="12" />
        </Step>
        <Step Type="Assign" Name="MinimumDwellTimeExpiredFlag" ID="56">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MinimumDwellTimeExpired</Value>
            </Property>
            <Property Name="NewValue">True</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="57" />
        </Step>
        <Step Type="UnSubscribe" Name="FromMinimumDwellTimeExpirationEvent" ExclusionExpression="MinimumDwellTimeType != List.VehicleMinimumDwellTimeType.DwellUntilEvent" ID="57">
          <Properties>
            <Property Name="EventName">MinimumDwellTimeExpirationEventName</Property>
            <Property Name="ProcessName">
              <Value>OnMinimumDwellTimeExpired</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="15" />
        </Step>
        <Step Type="Assign" Name="BeforeNextDestinationAssignments" ID="58">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnEvaluatingRiderReservation.Enabled</Value>
            </Property>
            <Property Name="NewValue">RideStation.Capacity &gt; RideStationLoad</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RideStation.Capacity &gt; RideStationLoad</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="16" />
        </Step>
        <Step Type="Decide" Name="IfBusyAndDestinationIsCurrentNode" ID="59">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.Busy &amp;&amp; DestinationNode==CurrentNode</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="31" />
          <Exit Name="False" Type="Alternate" NextID="39" />
        </Step>
        <Step Type="Assign" Name="ToClearPreferredOwner" ExclusionExpression="RoutingType == List.VehicleRoutingType.FixedRoute" ID="60">
          <Properties>
            <Property Name="StateVariableName">
              <Value>PreferredOwner</Value>
            </Property>
            <Property Name="NewValue">Nothing</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnNewSeizeRequest.Enabled</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">False</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="12" />
        </Step>
        <Step Type="Assign" Name="DwellingAssignments" ID="61">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnEvaluatingRiderReservation.Enabled</Value>
            </Property>
            <Property Name="NewValue">RideStation.Capacity &gt; RideStationLoad</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RideStation.Capacity &gt; RideStationLoad</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="55" />
        </Step>
        <Step Type="Execute" Name="SeizeOperator" Description="Seize and move the operator that is required to move the vehicle." Color="ff0000" ID="62">
          <Properties>
            <Property Name="ProcessName">
              <Value>SeizeOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="40" />
        </Step>
        <Step Type="Execute" Name="ReleaseOperator" Description="Release the operator that is requried to drive this vehicle." Color="ff0000" ID="63">
          <Properties>
            <Property Name="ProcessName">
              <Value>ReleaseOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Execute" Name="ReleaseOperator" Description="Release the operator that is requried to drive this vehicle." Color="ff0000" ID="64">
          <Properties>
            <Property Name="ProcessName">
              <Value>ReleaseOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Execute" Name="ReleaseOperator" Description="Release the operator that is requried to drive this vehicle." Color="ff0000" ID="65">
          <Properties>
            <Property Name="ProcessName">
              <Value>ReleaseOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="42" />
        </Step>
        <Step Type="Decide" Name="ChargeRequired" Color="c3d69b" ID="66">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ChargeRequired</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="67" />
          <Exit Name="False" Type="Alternate" NextID="47" />
        </Step>
        <Step Type="SetNode" Name="ToChargeNode" Color="c3d69b" ID="67">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">CurrentChargeNode</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="39" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnEvaluatingMoveRequest" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Entity.OnEvaluatingMoveRequest">
      <Properties />
      <Steps />
    </Process>
    <Process Name="OnMoveRequestAccepted" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Entity.OnMoveRequestAccepted" BeginStepID="2">
      <Properties />
      <Steps>
        <Step Type="SelectVisit" Name="ToAcceptedDestination" ID="2">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="3">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="9" />
          <Exit Name="False" Type="Alternate" NextID="4" />
        </Step>
        <Step Type="Decide" Name="IfUnpark" ID="4">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked &amp;&amp; (OnVisitingNode.TokensInProcess==0)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="8" />
          <Exit Name="False" Type="Alternate" NextID="5" />
        </Step>
        <Step Type="Fire" Name="RemainInPlaceEndedEvent" ID="5">
          <Properties>
            <Property Name="EventName">RemainInPlaceEnded</Property>
          </Properties>
        </Step>
        <Step Type="UnPark" Name="Vehicle" ID="6">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
          </Properties>
        </Step>
        <Step Type="Transfer" Name="ToDestinationNode" ID="7">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">DestinationNode</Property>
          </Properties>
        </Step>
        <Step Type="Execute" Name="SeizeOperatpr" Description="Seize and move the operator that is required to move the vehicle." Color="ff0000" ID="8">
          <Properties>
            <Property Name="ProcessName">
              <Value>SeizeOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Execute" Name="FreespaceMovementExecution" Color="c4bd97" ID="9">
          <Properties>
            <Property Name="ProcessName">
              <Value>FreespaceMovementExecution</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="10" />
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="10">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="7" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnEnteredFreeSpace" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Entity.OnEnteredFreeSpace" BeginStepID="5">
      <Properties>
        <Property Name="TokenClassName">FreeSpaceSteeringToken</Property>
        <Property Name="TokenActionOnAssociatedObjectDestroyed">EndProcess</Property>
        <Property Name="TokenActionOnAssociatedObjectTransferRequested">EndProcess</Property>
      </Properties>
      <Steps>
        <Step Type="Transfer" Name="ToDestinationNode" ID="2">
          <Properties>
            <Property Name="NodeName">FreeSpaceSteeringToken.DestinationNode</Property>
          </Properties>
        </Step>
        <Step Type="SetNode" Name="NextDestination" ID="3">
          <Properties>
            <Property Name="NodeName">FreeSpaceSteeringToken.DestinationNode</Property>
            <Property Name="AutoClearIfVisitDifferentNode">True</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Decide" Name="IfDestinationNode" ID="4">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">FreeSpaceSteeringToken.DestinationNode != Nothing</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="OnEnteredFreeSpaceAssignments" ID="5">
          <Properties>
            <Property Name="StateVariableName">
              <Value>FreeSpaceSteeringToken.EnteredFreeSpaceFromNode</Value>
            </Property>
            <Property Name="NewValue">Math.If(PreviousNode != Nothing, DirectDistanceTo.Object(PreviousNode) == 0.0, False)</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>FreeSpaceSteeringToken.NetworkPathNextLink</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">PreviousNode.OutboundLinks.SelectItemFor(Entity)</Property>
                  <Property Name="AssignmentsSkipAssignmentCondition">(DestinationNode != Nothing) || !FreeSpaceSteeringToken.EnteredFreeSpaceFromNode</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>FreeSpaceSteeringToken.NetworkPathNextNode</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.If(FreeSpaceSteeringToken.NetworkPathNextLink != Nothing, Math.If(PreviousNode == FreeSpaceSteeringToken.NetworkPathNextLink.StartingNode, FreeSpaceSteeringToken.NetworkPathNextLink.EndingNode, FreeSpaceSteeringToken.NetworkPathNextLink.StartingNode), Nothing)</Property>
                  <Property Name="AssignmentsSkipAssignmentCondition">(DestinationNode != Nothing) || !FreeSpaceSteeringToken.EnteredFreeSpaceFromNode</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>FreeSpaceSteeringToken.DestinationNode</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.If(DestinationNode != Nothing, DestinationNode, !FreeSpaceSteeringToken.EnteredFreeSpaceFromNode, Nothing, FreeSpaceSteeringToken.NetworkPathNextLink != Nothing, FreeSpaceSteeringToken.NetworkPathNextNode, PreviousNode.Nearest.InputNode != Nothing, PreviousNode.Nearest.InputNode, PreviousNode.Nearest.Node != Nothing, PreviousNode.Nearest.Node, Nothing)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>Movement.Rate</Value>
                  </Property>
                  <Property Name="AssignmentsSkipAssignmentCondition">FreeSpaceSteeringToken.DestinationNode != Nothing</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Execute" Name="FreespaceMovementExecution" Color="c4bd97" ID="6">
          <Properties>
            <Property Name="ProcessName">
              <Value>FreespaceMovementExecution</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="2" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnRiderReservationAccepted" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Transporter.OnRiderReservationAccepted" BeginStepID="12">
      <Properties />
      <Steps>
        <Step Type="Decide" Name="IfIdle" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.Idle</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="4" />
          <Exit Name="False" Type="Alternate" NextID="3" />
        </Step>
        <Step Type="Assign" Name="OnRiderReservationAcceptedAssignments" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>OnEvaluatingRiderReservation.Enabled</Value>
            </Property>
            <Property Name="NewValue">RideStation.Capacity &gt; RideStationLoad</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RideStation.Capacity &gt; RideStationLoad</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Seize" Name="Vehicle" ID="4">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceSeizes">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">ParentObject</Property>
                  <Property Name="SelectionGoal"></Property>
                  <Property Name="SelectionValueExpression"></Property>
                  <Property Name="RecordResourceCost">False</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="SelectVisit" Name="ToAcceptedDestination" ID="5">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="6">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="13" />
          <Exit Name="False" Type="Alternate" NextID="7" />
        </Step>
        <Step Type="Decide" Name="IfUnpark" ID="7">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">IsParked &amp;&amp; (OnVisitingNode.TokensInProcess==0)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="11" />
          <Exit Name="False" Type="Alternate" NextID="8" />
        </Step>
        <Step Type="Fire" Name="RemainInPlaceEndedEvent" ID="8">
          <Properties>
            <Property Name="EventName">RemainInPlaceEnded</Property>
          </Properties>
        </Step>
        <Step Type="UnPark" Name="Vehicle" ID="9">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
          </Properties>
        </Step>
        <Step Type="Transfer" Name="ToDestinationNode" ID="10">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="NodeName">DestinationNode</Property>
          </Properties>
        </Step>
        <Step Type="Execute" Name="SeizeOperatpr" Description="Seize and move the operator that is required to move the vehicle." Color="ff0000" ID="11">
          <Properties>
            <Property Name="ProcessName">
              <Value>SeizeOperator</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Execute" Name="AssignDriver" Color="f00000" ID="12">
          <Properties>
            <Property Name="ProcessName">
              <Value>AssignDriver</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="2" />
        </Step>
        <Step Type="Execute" Name="FreespaceMovementExecution" Color="c4bd97" ID="13">
          <Properties>
            <Property Name="ProcessName">
              <Value>FreespaceMovementExecution</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="14" />
        </Step>
        <Step Type="Decide" Name="IfInFreeSpace" ID="14">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(CurrentNode==Nothing)&amp;&amp;(CurrentLink==Nothing)&amp;&amp;(CurrentStation==Nothing)</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="10" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnRiderLoaded" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Transporter.OnRiderLoaded" BeginStepID="2">
      <Properties />
      <Steps>
        <Step Type="EndTransfer" Name="OntoVehicle" ID="2">
          <Properties />
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Execute" Name="LoadedAddOnProcess" ExclusionExpression="!LoadedAddOnProcess.HasValue" ID="3">
          <Properties>
            <Property Name="ProcessName">
              <Value>LoadedAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Fire" Name="RiderLoadedEvent" ExclusionExpression="!LoadedAddOnProcess.HasValue" ID="4">
          <Properties>
            <Property Name="EventName">RiderLoaded</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Delay" Name="Exit" Color="ffff80" ID="5">
          <Properties>
            <Property Name="DelayTime">Math.Epsilon</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Assign" Name="RiderAnimation" Description="AnimationLoop" Color="ffff80" ID="6">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ModelEntity.Animation</Value>
            </Property>
            <Property Name="NewValue">RiderAnimation</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="OnRiderUnloaded" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Transporter.OnRiderUnloaded" BeginStepID="2">
      <Properties />
      <Steps>
        <Step Type="Execute" Name="UnloadedAddOnProcess" ExclusionExpression="!UnloadedAddOnProcess.HasValue" ID="2">
          <Properties>
            <Property Name="ProcessName">
              <Value>UnloadedAddOnProcess</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="RiderAnimation" Description="AnimationLoop" Color="ffff80" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ModelEntity.Animation</Value>
            </Property>
            <Property Name="NewValue">"MovingAndIdle"</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Fire" Name="RiderUnloadedEvent" Color="92cddc" ID="4">
          <Properties>
            <Property Name="EventName">RiderUnloaded</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="FailureOccurrenceLogic" IsOverride="True" BeginStepID="11">
      <Properties />
      <Steps>
        <Step Type="Fail" Name="Vehicle" ID="2">
          <Properties>
            <Property Name="FailureName">
              <Value>Failure</Value>
            </Property>
            <Property Name="TokenWaitAction">WaitUntilOnFailedProcessCompleted</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Delay" Name="TimeToRepair" ID="3">
          <Properties>
            <Property Name="DelayTime">TimeToRepair</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Repair" Name="Vehicle" ID="4">
          <Properties>
            <Property Name="FailureName">
              <Value>Failure</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Fire" Name="FailuresTimerResetEvent" ID="5">
          <Properties>
            <Property Name="EventName">FailuresTimerReset</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Seize" Name="Vehicle" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="6">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceSeizes">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">ParentObject</Property>
                  <Property Name="SelectionGoal"></Property>
                  <Property Name="SelectionValueExpression"></Property>
                  <Property Name="RecordResourceCost">False</Property>
                  <Property Name="PerUseCostAccrualMethod"></Property>
                  <Property Name="RandomNumberStream"></Property>
                  <Property Name="SkipSeizeCondition">ResourceState!=List.ResourceStateName.Idle</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Allocate" Name="Vehicle" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.OnDemand, 0, 2)" ID="7">
          <Properties>
            <Property Name="ResourceType">ParentObject</Property>
          </Properties>
          <Exit Name="Failed" Type="Alternate" NextID="8" />
        </Step>
        <Step Type="PlanVisit" Name="NewTransportRequests" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.OnDemand, 0, 2)" ID="8">
          <Properties>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Fire" Name="FailuresTimerResetEvent" ID="9">
          <Properties>
            <Property Name="EventName">FailuresTimerReset</Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="ResourceState==7" ID="10">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ResourceState==7</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="2" />
          <Exit Name="False" Type="Alternate" NextID="9" />
        </Step>
        <Step Type="Decide" Name="CurrentLink != Nothing" ID="11">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">CurrentLink != Nothing</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="10" />
          <Exit Name="False" Type="Alternate" NextID="9" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnDriverLoading" BeginStepID="3" Category="OperatorProcessLogic">
      <Properties />
      <Steps>
        <Step Type="EndTransfer" Name="DriverLoaded" Color="ff0000" ID="2">
          <Properties />
        </Step>
        <Step Type="Decide" Name="T OperatorRequired" Color="ff0000" ID="3">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">OperatorRequired == True</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="2" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnDriverUnloading" BeginStepID="2" Category="OperatorProcessLogic">
      <Properties />
      <Steps>
        <Step Type="EndTransfer" Name="DriverUnloaded" Color="ff0000" ID="2">
          <Properties />
        </Step>
      </Steps>
    </Process>
    <Process Name="ReleasedDriverBecomesIdle" BeginStepID="2" Category="OperatorProcessLogic">
      <Properties />
      <Steps>
        <Step Type="Transfer" Name="DriverStationToNode" Color="ff0000" ID="2">
          <Properties>
            <Property Name="FromType">CurrentStation</Property>
            <Property Name="NodeName">CurrentNode</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Execute" Name="OnDriverUnloading" Color="ff0000" ID="3">
          <Properties>
            <Property Name="ProcessName">
              <Value>OnDriverUnloading</Value>
            </Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="ReleaseOperator" BeginStepID="5" Category="OperatorProcessLogic">
      <Properties />
      <Steps>
        <Step Type="Decide" Name="HasOperator" Color="ff0000" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">DriverStation.Contents.NumberWaiting &gt; 0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Release" Name="Operator" Color="ff0000" ID="3">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceReleases">
              <Rows>
                <Properties>
                  <Property Name="ResourceName">DriverStation.Contents.FirstItem.Entity</Property>
                  <Property Name="OnReleasedProcess">
                    <Value>ReleasedDriverBecomesIdle</Value>
                  </Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Execute" Name="DriverReleased" ID="4">
          <Properties>
            <Property Name="ProcessName">
              <Value>DriverReleased</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="T OperatorRequired" Color="ff0000" ID="5">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">OperatorRequired == True</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="2" />
        </Step>
      </Steps>
    </Process>
    <Process Name="SeizedOperatorBecomesDriver" BeginStepID="3" Category="OperatorProcessLogic">
      <Properties />
      <Steps>
        <Step Type="Transfer" Name="ToDriverStation" Color="ff0000" ID="2">
          <Properties>
            <Property Name="FromType">CurrentStation</Property>
            <Property Name="ToType">Station</Property>
            <Property Name="StationName">
              <Value>DriverStation</Value>
            </Property>
            <Property Name="TokenWaitAction">WaitUntilTransferring</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Wait" Name="ForDriverToArrive" Color="ff0000" ID="3">
          <Properties>
            <Property Name="EventName">DriverArrived</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="EndTransfer" Name="ToNode" Color="ff0000" ID="4">
          <Properties />
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Execute" Name="OnDriverLoading" Color="ff0000" ID="5">
          <Properties>
            <Property Name="ProcessName">
              <Value>OnDriverLoading</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="IsParked" Color="ff0000" ID="6">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Entity.IsParked</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="7" />
          <Exit Name="False" Type="Alternate" NextID="2" />
        </Step>
        <Step Type="Execute" Name="UnParkOperator" Color="ff0000" ID="7">
          <Properties>
            <Property Name="ProcessName">
              <Value>UnParkOperator</Value>
            </Property>
            <Property Name="TokenWaitAction">NoWait</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Delay" Name="StartUnpark" Color="ff0000" ID="8">
          <Properties>
            <Property Name="DelayTime">Math.Epsilon</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="EndTransfer" Name="Unpark" Color="ff0000" ID="9">
          <Properties />
          <Exit Name="Exit" Type="Primary" NextID="2" />
        </Step>
      </Steps>
    </Process>
    <Process Name="SeizeOperator" BeginStepID="5" Category="OperatorProcessLogic">
      <Properties />
      <Steps>
        <Step Type="Decide" Name="ReqiuresOperator" Color="ff0000" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">DriverStation.Contents.NumberWaiting == 0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Seize" Name="Operator" Color="ff0000" ID="3">
          <Properties>
            <Property Name="OwnerType">ParentObject</Property>
            <Property Name="ResourceSeizes">
              <Rows>
                <Properties>
                  <Property Name="ResourceType">WorkerObjectType</Property>
                  <Property Name="ResourceName">WorkerName</Property>
                  <Property Name="ResourceListName">WorkerListName</Property>
                  <Property Name="SelectionGoal">WorkerSelectionGoal</Property>
                  <Property Name="SelectionValueExpression">WorkerSelectionExpression</Property>
                  <Property Name="RequestMove">ToNode</Property>
                  <Property Name="DestinationNode">MTRVehicle.CurrentNode</Property>
                  <Property Name="OnSeizedProcess">
                    <Value>SeizedOperatorBecomesDriver</Value>
                  </Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Fire" Name="DriverArrived" Color="ff0000" ID="4">
          <Properties>
            <Property Name="EventName">DriverArrived</Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="T OperatorRequired" Color="ff0000" ID="5">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">OperatorRequired == True</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="2" />
        </Step>
      </Steps>
    </Process>
    <Process Name="UnParkOperator" BeginStepID="2" Category="OperatorProcessLogic">
      <Properties />
      <Steps>
        <Step Type="UnPark" Name="Driver" Color="ff0000" ID="2">
          <Properties />
        </Step>
      </Steps>
    </Process>
    <Process Name="RecordCurrentXandZ" BeginStepID="2">
      <Properties>
        <Property Name="TriggeringEventName">LogXZTimeIntervalTimer.Event</Property>
      </Properties>
      <Steps>
        <Step Type="Assign" Name="CurrentX" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentX</Value>
            </Property>
            <Property Name="NewValue">Math.Round( Location.X) </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="CurrentZ" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentZ</Value>
            </Property>
            <Property Name="NewValue"> Math.Round(Location.Z * -1) </Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="BeginCharging" BeginStepID="2" Category="Custom Processes">
      <Properties>
        <Property Name="AllowStepTrace">False</Property>
      </Properties>
      <Steps>
        <Step Type="Decide" Name="Charge?" Color="c3d69b" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">CurrentNode == CurrentChargeNode &amp;&amp; ChargeRequired</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="BeginCharging" Color="c3d69b" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>BatteryRemaining.Rate</Value>
            </Property>
            <Property Name="NewValue">BatteryChargeRate</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Assign" Name="CurrentThresholdValue - 1" Color="c3d69b" ID="4">
          <Properties>
            <Property Name="StateVariableName">
              <Value>BatteryRemaining_Charge.CurrentThresholdValue</Value>
            </Property>
            <Property Name="NewValue">BatteryRemaining_Charge.CurrentThresholdValue-1</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="CheckForLowBattery" BeginStepID="2" Category="Custom Processes">
      <Properties>
        <Property Name="AllowStepTrace">False</Property>
      </Properties>
      <Steps>
        <Step Type="Decide" Name="LowBattery?" Color="c3d69b" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">BatteryRemaining &lt;= LowBatteryThreshold + 0.01</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Assign" Name="ReduceCapacity" Color="c3d69b" ID="3">
          <Properties>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RideStation.CurrentCapacity</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">0</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CurrentCapacity</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">0</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>ResourceState</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">4</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="ChargeRequired" Color="c3d69b" ID="4">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ChargeRequired</Value>
            </Property>
            <Property Name="NewValue">True</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Decide" Name="RideStationEmpty" Color="c3d69b" ID="5">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">RideStation.Contents &lt; 1</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
          <Exit Name="False" Type="Alternate" NextID="6" />
        </Step>
        <Step Type="Wait" Name="RiderUnloaded" Color="c3d69b" ID="6">
          <Properties>
            <Property Name="EventName">RiderUnloaded</Property>
            <Property Name="EventCondition">RideStation.Contents &lt; 1</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="SetNode" Name="CurrentChargeNode" Color="c3d69b" ID="7">
          <Properties>
            <Property Name="NodeName">CurrentChargeNode</Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="NumberWaiting == 0" Color="c3d69b" ID="8">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">VisitRequestQueue.NumberWaiting == 0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="5" />
          <Exit Name="False" Type="Alternate" NextID="9" />
        </Step>
        <Step Type="Wait" Name="NumberWaiting == 0" Color="c3d69b" ID="9">
          <Properties>
            <Property Name="EventName">RiderUnloaded</Property>
            <Property Name="EventCondition">VisitRequestQueue.NumberWaiting == 0</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnMovementRateChanged" BeginStepID="2" Category="Custom Processes">
      <Properties>
        <Property Name="AllowStepTrace">False</Property>
      </Properties>
      <Steps>
        <Step Type="Assign" Name="DischargeRate" Color="c3d69b" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>BatteryRemaining.Rate</Value>
            </Property>
            <Property Name="NewValue">-Movement.Rate * BatteryDischargeRate</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Execute" Name="BeginCharging" Color="c3d69b" ID="3">
          <Properties>
            <Property Name="ProcessName">
              <Value>BeginCharging</Value>
            </Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="FullChargeDetected" BeginStepID="2" Category="Custom Processes">
      <Properties>
        <Property Name="AllowStepTrace">False</Property>
      </Properties>
      <Steps>
        <Step Type="Assign" Name="StopCharging" Color="c3d69b" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>BatteryRemaining.Rate</Value>
            </Property>
            <Property Name="NewValue">0</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="RestoreCapacity" Color="c3d69b" ID="3">
          <Properties>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>ChargeRequired</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">False</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RideStation.CurrentCapacity</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RideStation.InitialCapacity</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>ResourceState</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">0</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CurrentCapacity</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">1</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="PlanVisit" Name="InitialMoveOrTransportRequests" ExclusionExpression="Math.If(RoutingType == List.VehicleRoutingType.OnDemand, 0, 2)" ID="4">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SelectionGoal">TaskSelectionStrategy</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="MQTTElementEvent" BeginStepID="2">
      <Properties>
        <Property Name="TriggeringEventName">MQTTElement1.ElementEvent</Property>
      </Properties>
      <Steps>
        <Step Type="Decide" Name="RealTime" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ModelRunMode == 0</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="FreespaceMovementExecution" BeginStepID="5">
      <Properties>
        <Property Name="TokenClassName">FreeSpaceSteeringToken</Property>
        <Property Name="TokenActionOnAssociatedObjectDestroyed">EndProcess</Property>
        <Property Name="TokenActionOnAssociatedObjectTransferRequested">EndProcess</Property>
      </Properties>
      <Steps>
        <Step Type="Decide" Name="!= RealTime" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ModelRunMode &gt; 0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
          <Exit Name="False" Type="Alternate" NextID="3" />
        </Step>
        <Step Type="Travel" Name="FollowNetworkPath" Color="e5b9b7" ID="3">
          <Properties>
            <Property Name="EntityType">ParentObject</Property>
            <Property Name="SteeringBehavior" BehaviorGuid="6cbbbd77-ba6d-45d1-bcc7-0ed1bbd08ae8">
              <Value>Follow Network Path</Value>
              <Properties>
                <Property Name="NetworkName">
                  <Value>CurrentNetwork</Value>
                </Property>
                <Property Name="StartingNode">PreviousNode</Property>
                <Property Name="EndingNode">DestinationNode</Property>
              </Properties>
            </Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="DistanceToDest &lt; 2" Color="8064a2" ID="4">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">DistanceToDest &lt; 2</Property>
          </Properties>
          <Exit Name="False" Type="Alternate" NextID="2" />
        </Step>
        <Step Type="Assign" Name="DistanceToDest" Color="f2dcdb" ID="5">
          <Properties>
            <Property Name="StateVariableName">
              <Value>DistanceToDest</Value>
            </Property>
            <Property Name="NewValue">DirectDistanceTo.Object(DestinationNode )</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
      </Steps>
    </Process>
  </Processes>
  <Tokens>
    <Token Name="ChargeToken">
      <States>
        <ElementReferenceState Name="Destination" ElementType="Node" />
      </States>
    </Token>
  </Tokens>
  <External>
    <Graphics>
      <Queue Queue="RideStation.Contents" ExternallyVisible="True">
        <Points>
          <Point Location="0.7625 0.699999988079071 0" />
          <Point Location="-0.7625 0.699999988079071 0" />
        </Points>
      </Queue>
      <Queue Queue="DriverStation.Contents" Alignment="Inline" ExternallyVisible="True">
        <Points>
          <Point Location="-0.9375 0 0" />
          <Point Location="-2.0625 0 0" />
        </Points>
      </Queue>
      <StatusLabel Center="-1.5 0.270062515420583 -0.4" Width="1.225" Height="0.25" ExternallyVisible="True" Expression="BatteryRemaining" />
      <SymbolInstance Center="0 3.88578058618805E-16 0" ExternallyVisible="True">
        <SymbolRef Id="f10ed960-f982-4c93-a1aa-251b3e7ca8c2" />
      </SymbolInstance>
      <StatusLabel Center="-1.5 0.270062515420583 0.2" Width="1.225" Height="0.25" ExternallyVisible="True" Expression="RealX" />
      <StatusLabel Center="-1.5 0.270062515420583 0.5" Width="1.225" Height="0.25" ExternallyVisible="True" Expression="RealZ" />
    </Graphics>
  </External>
  <SaveHistories>
    <SaveHistory SavedDateTime="2022-01-21T17:41:59" ProductVersion="14.234.25882.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-01-24T14:17:02" ProductVersion="14.234.25882.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-01T15:57:03" ProductVersion="14.234.25941.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-09T14:01:30" ProductVersion="14.235.26088.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-13T14:38:55" ProductVersion="14.235.26122.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-14T20:15:46" ProductVersion="14.235.26159.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-15T16:17:36" ProductVersion="14.235.26173.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-17T13:52:23" ProductVersion="14.235.26184.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-18T16:44:49" ProductVersion="14.235.26184.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-23T00:39:34" ProductVersion="14.235.26245.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-23T01:10:59" ProductVersion="14.235.26295.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-25T20:23:13" ProductVersion="14.235.26335.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-04-05T13:06:37" ProductVersion="14.237.26791.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-04-06T16:24:21" ProductVersion="14.237.26861.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-07T20:46:42" ProductVersion="14.237.26870.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-11T21:24:51" ProductVersion="14.237.26883.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-15T13:50:35" ProductVersion="14.238.26931.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-27T21:50:23" ProductVersion="14.238.27085.0" Edition="RPS" />
  </SaveHistories>
  <Graphics>
    <AnimationSetup MinimumNumberOfFramesToDisplayIdleAnimation="10" />
  </Graphics>
</Fragment>
<!-- Bt6Ix4mnLSHXbBNVsZWrO+nk36Z3vTR+JOQu4ln9inHbLYieFsk04crV3KFeXPapCNUrT1U6/XorGP9LUlM1LA== -->