<Fragment>
  <Compatibility ParseElementFunctionsInExpressionsLast="True" ParseNonEntityAssociatedObjectForPropertyReference="False" AllowInteractiveEntryOfNonStandardElementNames="False" ParsePropertiesForObjectTypeForAutoCreatedObjectsFirst="False" />
  <Lists>
    <StringList Name="TravelModes">
      <Items>
        <Item Value="FixedHeight" />
        <Item Value="Direct" />
      </Items>
    </StringList>
  </Lists>
  <PropertyDefinitions>
    <Categories>
      <Category Name="Basic Logic" Description="Basic Logic" />
      <Category Name="Process Logic" Description="Process Logic" />
      <Category Name="Crossing Logic" Description="Crossing Logic" />
      <Category Name="Transport Logic" Description="Transport Logic" />
      <Category Name="Travel Logic" Description="Travel Logic" />
      <Category Name="Routing Logic" Description="Routing Logic" />
      <Category Name="Routing Logic/Other Routing Out Options" Description="Routing Logic/Other Routing Out Options" InitiallyExpanded="False" />
      <Category Name="Population" Description="Population" InitiallyExpanded="False" />
      <Category Name="Results Classification" Description="Results Classification" InitiallyExpanded="False" />
      <Category Name="Stopping Conditions" Description="Stopping Conditions" InitiallyExpanded="False" />
      <Category Name="Input Flow Control" Description="Input Flow Control" />
      <Category Name="Financials" Description="Financials" InitiallyExpanded="False" />
      <Category Name="Financials/Transport Costs" Description="Transport Costs" InitiallyExpanded="False" />
      <Category Name="Financials/Resource Costs" Description="Resource Costs" InitiallyExpanded="False" />
      <Category Name="Advanced Options" Description="Advanced Options" InitiallyExpanded="False" />
    </Categories>
    <DynamicObjectInstanceProperty Name="RotatorInstance" DisplayName="Rotator" Description="The name of the RobotRotator that is attached to the Base and rotates the Robot assembly." Visible="False" ComplexityLevel="Advanced" Category="Components" DefaultValue="null" NullString="null" UseDefaultEntity="False" ValidObjectType="Agent" ObjectTypeName="RobotRotator" ObjectTypeDefinitionHint="RobotRotator" DefaultValueInstantiation="AutoCreateInstance" InitialObjectOffset="0.168 0.6 0" />
    <DynamicObjectInstanceProperty Name="LowerArmInstance" DisplayName="Lower Arm" Description="The RobotLowerArm that is attached to the RobotUpperArm and the RobotHand." Visible="False" Category="Components" DefaultValue="null" NullString="null" UseDefaultEntity="False" ValidObjectType="Agent" ObjectTypeName="RobotUpperArm" ObjectTypeDefinitionHint="RobotUpperArm" DefaultValueInstantiation="AutoCreateInstance" InitialObjectOffset="1.6 1.35 0.2" />
    <DynamicObjectInstanceProperty Name="UpperArmInstance" DisplayName="Upper Arm" Description="The RobotUpperArm that is attached to the RobotRotator and the RobotLowerArm." Visible="False" ComplexityLevel="Advanced" Category="Components" DefaultValue="null" NullString="null" UseDefaultEntity="False" ValidObjectType="Agent" ObjectTypeName="RobotLowerArm" ObjectTypeDefinitionHint="RobotLowerArm" DefaultValueInstantiation="AutoCreateInstance" InitialObjectOffset="2.5 1.3 0" />
    <TransporterProperty Name="HandInstance" DisplayName="Hand" Description="The name of the RobotHand that represents the end effector for this Robot." Visible="False" ComplexityLevel="Advanced" Category="Components" DefaultValue="null" NullString="null" ValidObjectType="Transporter" ObjectTypeName="RobotHand" ObjectTypeDefinitionHint="RobotHand" DefaultValueInstantiation="AutoCreateInstance" InitialObjectOffset="3.6 1.6 0.02" />
    <NodeProperty Name="InitialNode" DisplayName="Initial Node (Home)" Description="The initial node location of the RobotHand at the beginning of the simulation run. Also indicates the RobotHand's initial 'Home' location if the RobotHand is specified to 'Park At Home' or 'Go To Home' " Category="Routing Logic" DefaultValue="null" NullString="null" ValidObjectType="Node" LocationType="Cartesian" />
    <ListProperty Name="TravelMode" DisplayName="Travel Mode" Description="The Travel Mode for this Robot can be either Direct or Fixed Height. In the case of Direct the Robot moves in a direct path to it's destination.  In the case of Fixed Height the Robot first moves to a specified height, and then travels at that height to its destination." Category="Routing Logic" DefaultValue="Fixed Height" NullString="null" List="TravelModes">
      <Captions>
        <Caption Value="FixedHeight" Display="Fixed Height" />
      </Captions>
    </ListProperty>
    <ExpressionProperty Name="TravelHeight" DisplayName="Travel Height" Description="The travel height for the Robot when using a Fixed Height travel mode." Category="Routing Logic" DefaultValue="1.0" NullString="null" UnitType="Length">
      <Switch Property="TravelMode" Value="FixedHeight" />
    </ExpressionProperty>
    <BooleanProperty Name="ExperimentAnimationEvents" DisplayName="Experiment Animation Events" Description="If True, incremental animation events are executed when running in experiment mode. This will generate the exact same sequence of events as in animation mode, but execute much slower." ComplexityLevel="Advanced" Category="Advanced Options" DefaultValue="False" NullString="null" />
    <Overrides>
      <Override Name="ReportStatistics" Visible="False" />
      <Override Name="ParentCostCenter" Visible="False" />
      <Override Name="InitialCost" Visible="False" />
      <Override Name="InitialCostRate" Visible="False" />
      <Override Name="ResourceIdleCostRate" Visible="False" />
      <Override Name="ResourceCostPerUse" Visible="False" />
      <Override Name="ResourceUsageCostRate" Visible="False" />
      <Override Name="LogResourceUsage" Visible="False" DefaultValue="True" />
      <Override Name="DisplayName" Visible="False" />
      <Override Name="DisplayCategory" Visible="False" />
      <Override Name="DisplayColor" Visible="False" />
      <Override Name="IncludeInPlanResourceConstraints" Visible="False" />
      <Override Name="CapacityType" Visible="False" />
      <Override Name="InitialWorkSchedule" Visible="False" />
      <Override Name="WorkDayExceptions" Visible="False" />
      <Override Name="WorkPeriodExceptions" Visible="False" />
      <Override Name="InitialCapacity" Visible="False" />
      <Override Name="RankingRule" Visible="False" />
      <Override Name="RankingExpression" Visible="False" />
      <Override Name="DynamicSelectionRule" Visible="False" />
      <Override Name="CurrentSizeIndex" Visible="False" />
      <Override Name="TransferInConstraintsType" Visible="False" />
      <Override Name="TransferInCondition" Visible="False" />
      <Override Name="TransferOutConstraintsType" Visible="False" />
      <Override Name="TransferOutCondition" Visible="False" />
      <Override Name="ExpectedSetupTimeExpression" Visible="False" />
      <Override Name="ExpectedOperationTimeExpression" Visible="False" />
    </Overrides>
  </PropertyDefinitions>
  <States>
    <ElementReferenceState Name="MyRotator" ElementType="Entity" />
    <ElementReferenceState Name="MyLowerArm" ElementType="Entity" />
    <ElementReferenceState Name="MyUpperArm" ElementType="Entity" />
    <ElementReferenceState Name="MyHand" ElementType="Entity" />
    <DiscreteState Name="DesiredHeading" />
    <DiscreteState Name="Reach" />
    <DiscreteState Name="Q1Angle" />
    <DiscreteState Name="Q2Angle" />
    <DiscreteState Name="DesiredX" />
    <DiscreteState Name="DesiredY" />
    <DiscreteState Name="DesiredZ" />
    <DiscreteState Name="DeltaX" />
    <DiscreteState Name="DeltaZ" />
    <DiscreteState Name="FloorLength" />
    <DiscreteState Name="ArmBaseY" />
    <DiscreteState Name="DeltaY" />
    <DiscreteState Name="UpdateIntervalsRemaining" />
    <DiscreteState Name="RotatorServoUpdatesRemaining" />
    <DiscreteState Name="LowerServoUpdatesRemaining" />
    <DiscreteState Name="UpperServoUpdatesRemaining" />
    <DiscreteState Name="UpdateTimeInterval" InitialValueUnits="Hours" UnitType="Time" />
    <DiscreteState Name="CosHeading" />
    <DiscreteState Name="SinHeading" />
    <DiscreteState Name="SinPitchLower" />
    <DiscreteState Name="SinPitchUpper" />
    <DiscreteState Name="CosPitchLower" />
    <DiscreteState Name="CosPitchUpper" />
    <DiscreteState Name="ArmBaseX" />
    <DiscreteState Name="ArmBaseZ" />
    <DiscreteState Name="CosOffsetHeading" />
    <DiscreteState Name="SinOffsetHeading" />
    <DiscreteState Name="SinPitchHand" />
    <DiscreteState Name="CosPitchHand" />
    <DiscreteState Name="CosDesiredHeading" />
    <DiscreteState Name="SinDesiredHeading" />
    <DiscreteState Name="CurrentHeading" />
    <DiscreteState Name="BaseX" />
    <DiscreteState Name="BaseY" />
    <DiscreteState Name="BaseZ" />
  </States>
  <Events />
  <UsedObjects>
    <UsedObject Name="RobotLowerArm" />
    <UsedObject Name="RobotUpperArm" />
    <UsedObject Name="RobotHand" />
    <UsedObject Name="RobotRotator" />
  </UsedObjects>
  <Processes>
    <Process Name="OnRunInitialized" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnRunInitialized" BeginStepID="36">
      <Properties />
      <Steps>
        <Step Type="Create" Name="Rotator" ID="2">
          <Properties>
            <Property Name="EntityType">RotatorInstance</Property>
          </Properties>
          <Exit Name="Original" Type="Primary" NextID="3" />
          <Exit Name="Created" Type="Alternate" NextID="18" />
        </Step>
        <Step Type="Create" Name="LowerArm" ID="3">
          <Properties>
            <Property Name="EntityType">LowerArmInstance</Property>
          </Properties>
          <Exit Name="Original" Type="Primary" NextID="4" />
          <Exit Name="Created" Type="Alternate" NextID="19" />
        </Step>
        <Step Type="Create" Name="UpperArm" ID="4">
          <Properties>
            <Property Name="EntityType">UpperArmInstance</Property>
          </Properties>
          <Exit Name="Original" Type="Primary" NextID="21" />
          <Exit Name="Created" Type="Alternate" NextID="20" />
        </Step>
        <Step Type="Assign" Name="RotatorsBase" ID="5">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotRotator.MyBase</Value>
            </Property>
            <Property Name="NewValue">ParentObject</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="15" />
        </Step>
        <Step Type="Assign" Name="BasesLowerArm" ID="6">
          <Properties>
            <Property Name="StateVariableName">
              <Value>Robot.MyLowerArm</Value>
            </Property>
            <Property Name="NewValue">RobotUpperArm</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="LowerArmsBase" ID="7">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotUpperArm.MyBase</Value>
            </Property>
            <Property Name="NewValue">ParentObject</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="8" />
        </Step>
        <Step Type="Assign" Name="EffectiveLength" ID="8">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotUpperArm.EffectiveLength</Value>
            </Property>
            <Property Name="NewValue">RobotUpperArm.Size.Length - RobotUpperArm.RotatorJointOffset * Size.Length - RobotUpperArm.UpperJointOffset * Size.Length</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Assign" Name="MidPointOffset" ID="9">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotUpperArm.MidPointOffset</Value>
            </Property>
            <Property Name="NewValue">RobotUpperArm.Size.Length / 2 - RobotUpperArm.RotatorJointOffset * Size.Length</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="16" />
        </Step>
        <Step Type="Assign" Name="BasesUpperArm" ID="10">
          <Properties>
            <Property Name="StateVariableName">
              <Value>Robot.MyUpperArm</Value>
            </Property>
            <Property Name="NewValue">RobotLowerArm</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="11" />
        </Step>
        <Step Type="Assign" Name="UpperArmsBase" ID="11">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotLowerArm.MyBase</Value>
            </Property>
            <Property Name="NewValue">ParentObject</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="12" />
        </Step>
        <Step Type="Assign" Name="EffectiveLength" ID="12">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotLowerArm.EffectiveLength</Value>
            </Property>
            <Property Name="NewValue">RobotLowerArm.Size.Length - RobotLowerArm.LowerJointOffset * Size.Length - RobotLowerArm.HandJointOffset * Size.Length</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="13" />
        </Step>
        <Step Type="Assign" Name="MidPointOffset" ID="13">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotLowerArm.MidPointOffset</Value>
            </Property>
            <Property Name="NewValue">RobotLowerArm.Size.Length / 2 - RobotLowerArm.LowerJointOffset * Size.Length</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="17" />
        </Step>
        <Step Type="Assign" Name="BasesRotator" ID="14">
          <Properties>
            <Property Name="StateVariableName">
              <Value>Robot.MyRotator</Value>
            </Property>
            <Property Name="NewValue">RobotRotator</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Assign" Name="NoMovement" ID="15">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotRotator.Movement.Rate</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="35" />
        </Step>
        <Step Type="Assign" Name="NoMovement" ID="16">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotUpperArm.Movement.Rate</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Assign" Name="NoMovement" ID="17">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotLowerArm.Movement.Rate</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Transfer" Name="ParentModel" ID="18">
          <Properties>
            <Property Name="ToType">FreeSpace</Property>
            <Property Name="FacilityName">Robot.Location.Parent</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="14" />
        </Step>
        <Step Type="Transfer" Name="ParentModel" ID="19">
          <Properties>
            <Property Name="ToType">FreeSpace</Property>
            <Property Name="FacilityName">Robot.Location.Parent</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Transfer" Name="ParentModel" ID="20">
          <Properties>
            <Property Name="ToType">FreeSpace</Property>
            <Property Name="FacilityName">Robot.Location.Parent</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="10" />
        </Step>
        <Step Type="Create" Name="Hand" ID="21">
          <Properties>
            <Property Name="EntityType">HandInstance</Property>
          </Properties>
          <Exit Name="Created" Type="Alternate" NextID="22" />
        </Step>
        <Step Type="Transfer" Name="ParentModel" ID="22">
          <Properties>
            <Property Name="ToType">FreeSpace</Property>
            <Property Name="FacilityName">Robot.Location.Parent</Property>
          </Properties>
          <Exit Name="OK" Type="Primary" NextID="23" />
        </Step>
        <Step Type="Assign" Name="NoMovement" ID="23">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotHand.Movement.Rate</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="37" />
        </Step>
        <Step Type="Assign" Name="BasesHand" ID="24">
          <Properties>
            <Property Name="StateVariableName">
              <Value>Robot.MyHand</Value>
            </Property>
            <Property Name="NewValue">RobotHand</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="25" />
        </Step>
        <Step Type="Assign" Name="HandsBase" ID="25">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotHand.MyBase</Value>
            </Property>
            <Property Name="NewValue">Robot</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="26" />
        </Step>
        <Step Type="Assign" Name="InitLocation" ID="26">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotHand.Movement.X</Value>
            </Property>
            <Property Name="NewValue">InitialNode.Location.X</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RobotHand.Movement.Y</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">InitialNode.Location.Y</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RobotHand.Movement.Z</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">InitialNode.Location.Z</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DesiredX</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RobotHand.Movement.X</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DesiredY</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RobotHand.Movement.Y</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DesiredZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RobotHand.Movement.Z</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="27" />
        </Step>
        <Step Type="Assign" Name="InitialHandVariables" ID="27">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotHand.Movement.Pitch</Value>
            </Property>
            <Property Name="NewValue">RobotHand.TravelPitchAngle</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>Robot.SinPitchHand</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sin(RobotHand.Movement.Pitch * Math.PI / 180)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>Robot.CosPitchHand</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Cos(RobotHand.Movement.Pitch * Math.PI / 180)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RobotHand.MidPointOffset</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RobotHand.Size.Length / 2 - RobotHand.UpperJointOffset*Size.Length</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RobotHand.MidPointOffsetFloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RobotHand.MidPointOffset*Size.Length * Robot.CosPitchHand</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="28" />
        </Step>
        <Step Type="Execute" Name="ComputeHeading" ID="28">
          <Properties>
            <Property Name="ProcessName">
              <Value>ComputeHeading</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="29" />
        </Step>
        <Step Type="Assign" Name="ComponentHeading" ID="29">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyLowerArm.Movement.Heading</Value>
            </Property>
            <Property Name="NewValue">DesiredHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyRotator.RobotRotator.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RobotHand.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CosHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CosDesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>SinHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">SinDesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CurrentHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="30" />
        </Step>
        <Step Type="Assign" Name="DesiredOffsetLocation" ID="30">
          <Properties>
            <Property Name="StateVariableName">
              <Value>DesiredX</Value>
            </Property>
            <Property Name="NewValue">RobotHand.Location.X - RobotHand.MidPointOffsetFloorLength * CosDesiredHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DesiredY</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RobotHand.Location.Y - RobotHand.MidPointOffset * SinPitchHand</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DesiredZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RobotHand.Location.Z - RobotHand.MidPointOffsetFloorLength * SinDesiredHeading</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="31" />
        </Step>
        <Step Type="Execute" Name="KinematicsPitch" ID="31">
          <Properties>
            <Property Name="ProcessName">
              <Value>ReverseKinematicsPitch</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="32" />
        </Step>
        <Step Type="Assign" Name="LowerArmPitch" ID="32">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyLowerArm.Movement.Pitch</Value>
            </Property>
            <Property Name="NewValue">MyLowerArm.RobotUpperArm.DesiredPitch</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="33" />
        </Step>
        <Step Type="Assign" Name="UpperArmPitch" ID="33">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyUpperArm.Movement.Pitch</Value>
            </Property>
            <Property Name="NewValue">MyUpperArm.RobotLowerArm.DesiredPitch</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="34" />
        </Step>
        <Step Type="Execute" Name="SetArmLocations" ID="34">
          <Properties>
            <Property Name="ProcessName">
              <Value>SetArmLocations</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Assign" Name="ArmBaseY" ID="35">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ArmBaseY</Value>
            </Property>
            <Property Name="NewValue">Robot.Location.Y + Robot.Size.Height + MyRotator.RobotRotator.Size.Height + MyRotator.RobotRotator.JointVerticalOffset*Size.Length</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RobotRotator.Movement.Y</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Robot.Location.Y + Robot.Size.Height + RobotRotator.RotationalOffsetY</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
        </Step>
        <Step Type="Assign" Name="BaseLocation" ID="36">
          <Properties>
            <Property Name="StateVariableName">
              <Value>BaseX</Value>
            </Property>
            <Property Name="NewValue">Robot.Location.X</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>BaseY</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Robot.Location.Y</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>BaseZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Robot.Location.Z</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="2" />
        </Step>
        <Step Type="Assign" Name="HomeNode" ID="37">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RobotHand.HomeNode</Value>
            </Property>
            <Property Name="NewValue">InitialNode</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="24" />
        </Step>
      </Steps>
    </Process>
    <Process Name="ComputeHeading" BeginStepID="2" Description="Compute desired heading.">
      <Properties>
        <Property Name="AllowStepTrace">False</Property>
      </Properties>
      <Steps>
        <Step Type="Decide" Name="ATanDefined" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">DesiredX != BaseX</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
          <Exit Name="False" Type="Alternate" NextID="4" />
        </Step>
        <Step Type="Decide" Name="NotZAxis" ID="3">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">DesiredZ != BaseZ</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="6" />
          <Exit Name="False" Type="Alternate" NextID="5" />
        </Step>
        <Step Type="Assign" Name="DesiredHeading" ID="4">
          <Properties>
            <Property Name="StateVariableName">
              <Value>DesiredHeading</Value>
            </Property>
            <Property Name="NewValue">Math.If(DesiredZ&gt;BaseZ, 180,0)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="DesiredHeading" ID="5">
          <Properties>
            <Property Name="StateVariableName">
              <Value>DesiredHeading</Value>
            </Property>
            <Property Name="NewValue">Math.If(DesiredX&gt;BaseX,90, 270)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="DesiredHeading" ID="6">
          <Properties>
            <Property Name="StateVariableName">
              <Value>DesiredHeading</Value>
            </Property>
            <Property Name="NewValue">Math.If ((DesiredX - BaseX)&gt; 0, 90, -90)  +  (180 / Math.PI) * Math.Atan((DesiredZ -BaseZ ) / (DesiredX -BaseX))</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="HeadingCosSiign" ID="7">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CosDesiredHeading</Value>
            </Property>
            <Property Name="NewValue">Math.Cos((DesiredHeading - 90) * Math.PI / 180)</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>SinDesiredHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sin((DesiredHeading - 90) * Math.PI / 180)</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="MoveToDesiredPosition" BeginStepID="27" Scope="Public" Description="Move robot to new position by executing reverse kinematics to determine desired pitches and then incremently changing pitches. ">
      <Properties />
      <Steps>
        <Step Type="Assign" Name="RotatorUpdate" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentHeading</Value>
            </Property>
            <Property Name="NewValue">CurrentHeading + Math.If((DesiredHeading &gt; CurrentHeading) &amp;&amp; ((DesiredHeading - CurrentHeading) &lt; 180) || (DesiredHeading &lt; CurrentHeading) &amp;&amp; ((CurrentHeading - DesiredHeading) &gt; 180), MyRotator.RobotRotator.RotationRate, -MyRotator.RobotRotator.RotationRate) * UpdateTimeInterval * 3600</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties />
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyRotator.RobotRotator.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CurrentHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CurrentHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CurrentHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyHand.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CurrentHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RotatorServoUpdatesRemaining</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">RotatorServoUpdatesRemaining - 1</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Assign" Name="LowerUpdate" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyLowerArm.Movement.Pitch</Value>
            </Property>
            <Property Name="NewValue">MyLowerArm.Movement.Pitch + Math.If(MyLowerArm.RobotUpperArm.DesiredPitch &gt; MyLowerArm.Movement.Pitch, MyLowerArm.RobotUpperArm.PitchChangeRate, -MyLowerArm.RobotUpperArm.PitchChangeRate) * UpdateTimeInterval * 3600</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>LowerServoUpdatesRemaining</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">LowerServoUpdatesRemaining - 1</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Decide" Name="RotatorUpdateRequired" ID="4">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">RotatorServoUpdatesRemaining &gt;= 1</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="2" />
          <Exit Name="False" Type="Alternate" NextID="10" />
        </Step>
        <Step Type="Delay" Name="UpdateInterval" ID="5">
          <Properties>
            <Property Name="DelayTime" Units="Seconds">UpdateTimeInterval</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Decide" Name="LowerUpdateRequired" ID="6">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">LowerServoUpdatesRemaining &gt;= 1</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
          <Exit Name="False" Type="Alternate" NextID="11" />
        </Step>
        <Step Type="Decide" Name="UpperUpdateRequired" ID="7">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">UpperServoUpdatesRemaining &gt;= 1</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="8" />
          <Exit Name="False" Type="Alternate" NextID="12" />
        </Step>
        <Step Type="Assign" Name="UpperUpdate" ID="8">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyUpperArm.Movement.Pitch</Value>
            </Property>
            <Property Name="NewValue">MyUpperArm.Movement.Pitch + Math.If(MyUpperArm.RobotLowerArm.DesiredPitch &gt; MyUpperArm.Movement.Pitch, MyUpperArm.RobotLowerArm.PitchChangeRate, -MyUpperArm.RobotLowerArm.PitchChangeRate) * UpdateTimeInterval * 3600</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>UpperServoUpdatesRemaining</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">UpperServoUpdatesRemaining  - 1</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Assign" Name="DecrementRequiredUpdates" ID="9">
          <Properties>
            <Property Name="StateVariableName">
              <Value>UpdateIntervalsRemaining</Value>
            </Property>
            <Property Name="NewValue">UpdateIntervalsRemaining -1</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="13" />
        </Step>
        <Step Type="Assign" Name="FinalRotatorPosition" ID="10">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentHeading</Value>
            </Property>
            <Property Name="NewValue">DesiredHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyRotator.RobotRotator.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyHand.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RotatorServoUpdatesRemaining</Value>
                  </Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Assign" Name="FinalLowerPosition" ID="11">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyLowerArm.Movement.Pitch</Value>
            </Property>
            <Property Name="NewValue">MyLowerArm.RobotUpperArm.DesiredPitch</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>LowerServoUpdatesRemaining</Value>
                  </Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="FinalUpperPosition" ID="12">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyUpperArm.Movement.Pitch</Value>
            </Property>
            <Property Name="NewValue">MyUpperArm.RobotLowerArm.DesiredPitch</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>UpperServoUpdatesRemaining</Value>
                  </Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="9" />
        </Step>
        <Step Type="Execute" Name="SetArmPositions" ID="13">
          <Properties>
            <Property Name="ProcessName">
              <Value>SetArmLocations</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="21" />
        </Step>
        <Step Type="Assign" Name="UpdateInterval" ID="14">
          <Properties>
            <Property Name="StateVariableName">
              <Value>UpdateTimeInterval</Value>
            </Property>
            <Property Name="NewValue" Units="Seconds">MyRotator.RobotRotator.DegreesRotationPerUpdate / (Math.Max(MyRotator.RobotRotator.RotationRate, Math.Max(MyLowerArm.RobotUpperArm.PitchChangeRate, MyUpperArm.RobotLowerArm.PitchChangeRate)))</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>RotatorServoUpdatesRemaining</Value>
                  </Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>LowerServoUpdatesRemaining</Value>
                  </Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>UpperServoUpdatesRemaining</Value>
                  </Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="15" />
        </Step>
        <Step Type="Decide" Name="RotatorUpdates" ID="15">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">CurrentHeading != DesiredHeading</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="16" />
          <Exit Name="False" Type="Alternate" NextID="17" />
        </Step>
        <Step Type="Assign" Name="RotatorIntervals" ID="16">
          <Properties>
            <Property Name="StateVariableName">
              <Value>RotatorServoUpdatesRemaining</Value>
            </Property>
            <Property Name="NewValue">Math.Min(Math.Abs(CurrentHeading - DesiredHeading), (360 - Math.Abs(CurrentHeading - DesiredHeading))) / (MyRotator.RobotRotator.RotationRate * UpdateTimeInterval * 3600)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="17" />
        </Step>
        <Step Type="Decide" Name="LowerUpdates" ID="17">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">MyLowerArm.Movement.Pitch != MyLowerArm.RobotUpperArm.DesiredPitch</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="18" />
          <Exit Name="False" Type="Alternate" NextID="19" />
        </Step>
        <Step Type="Assign" Name="LowerIntervals" ID="18">
          <Properties>
            <Property Name="StateVariableName">
              <Value>LowerServoUpdatesRemaining</Value>
            </Property>
            <Property Name="NewValue">Math.Abs(MyLowerArm.Movement.Pitch - MyLowerArm.RobotUpperArm.DesiredPitch) / (MyLowerArm.RobotUpperArm.PitchChangeRate * UpdateTimeInterval * 3600)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="19" />
        </Step>
        <Step Type="Decide" Name="UpperUpdates" ID="19">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">MyUpperArm.Movement.Pitch != MyUpperArm.RobotLowerArm.DesiredPitch</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="20" />
          <Exit Name="False" Type="Alternate" NextID="22" />
        </Step>
        <Step Type="Assign" Name="UpperIntervals" ID="20">
          <Properties>
            <Property Name="StateVariableName">
              <Value>UpperServoUpdatesRemaining</Value>
            </Property>
            <Property Name="NewValue">Math.Abs(MyUpperArm.Movement.Pitch - MyUpperArm.RobotLowerArm.DesiredPitch) / (MyUpperArm.RobotLowerArm.PitchChangeRate * UpdateTimeInterval * 3600)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="22" />
        </Step>
        <Step Type="Decide" Name="FullUpdatesRequired" ID="21">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">UpdateIntervalsRemaining &gt;= 1</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="5" />
          <Exit Name="False" Type="Alternate" NextID="23" />
        </Step>
        <Step Type="Assign" Name="RemainingUpdates" ID="22">
          <Properties>
            <Property Name="StateVariableName">
              <Value>UpdateIntervalsRemaining</Value>
            </Property>
            <Property Name="NewValue">Math.Max(RotatorServoUpdatesRemaining, Math.Max(LowerServoUpdatesRemaining, UpperServoUpdatesRemaining))</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="29" />
        </Step>
        <Step Type="Decide" Name="PartialUpdateRequired" ID="23">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">UpdateIntervalsRemaining  &gt; 0</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="25" />
        </Step>
        <Step Type="Assign" Name="FinalPosition" ID="24">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentHeading</Value>
            </Property>
            <Property Name="NewValue">DesiredHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyRotator.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyHand.Movement.Heading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.Movement.Pitch</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyLowerArm.RobotUpperArm.DesiredPitch</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.Movement.Pitch</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyUpperArm.RobotLowerArm.DesiredPitch</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="26" />
        </Step>
        <Step Type="Delay" Name="RemainingInterval" ID="25">
          <Properties>
            <Property Name="DelayTime" Units="Seconds">UpdateTimeInterval * UpdateIntervalsRemaining</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="24" />
        </Step>
        <Step Type="Execute" Name="SetArmPositions" ID="26">
          <Properties>
            <Property Name="ProcessName">
              <Value>SetArmLocations</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Execute" Name="ComputeHeading" ID="27">
          <Properties>
            <Property Name="ProcessName">
              <Value>ComputeHeading</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="28" />
        </Step>
        <Step Type="Execute" Name="ReverseKinematics" ID="28">
          <Properties>
            <Property Name="ProcessName">
              <Value>ReverseKinematicsPitch</Value>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="14" />
        </Step>
        <Step Type="Decide" Name="AnimationEvents" ID="29">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">(Run.Mode == 1) || ExperimentAnimationEvents</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="21" />
          <Exit Name="False" Type="Alternate" NextID="25" />
        </Step>
      </Steps>
    </Process>
    <Process Name="ReverseKinematicsPitch" BeginStepID="2" Description="Compute desired upper and lower arm pitch">
      <Properties />
      <Steps>
        <Step Type="Assign" Name="Variables" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ArmBaseX</Value>
            </Property>
            <Property Name="NewValue">BaseX + MyRotator.RobotRotator.JointRadialOffset*Size.Length * CosDesiredHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>ArmBaseZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">BaseZ + MyRotator.RobotRotator.JointRadialOffset* Size.Length * SinDesiredHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DeltaX</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredX - ArmBaseX</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DeltaY</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredY-ArmBaseY</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>DeltaZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">DesiredZ - ArmBaseZ</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>FloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sqrt( DeltaX^2 + DeltaZ^2 )</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>Reach</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sqrt(FloorLength ^ 2 + DeltaY ^ 2)</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="Q1Angle" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>Q1Angle</Value>
            </Property>
            <Property Name="NewValue">Math.Atan( DeltaY/FloorLength )</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Assign" Name="Q2Angle" ID="4">
          <Properties>
            <Property Name="StateVariableName">
              <Value>Q2Angle</Value>
            </Property>
            <Property Name="NewValue">Math.Acos((MyLowerArm.RobotUpperArm.EffectiveLength ^ 2 - MyUpperArm.RobotLowerArm.EffectiveLength ^ 2 + Reach ^ 2) / (2 * MyLowerArm.RobotUpperArm.EffectiveLength * Reach))</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Assign" Name="LowerArmDesiredPitch" ID="5">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyLowerArm.RobotUpperArm.DesiredPitch</Value>
            </Property>
            <Property Name="NewValue">(180 / Math.PI) * (Q1Angle + Q2Angle)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
        <Step Type="Assign" Name="UpperArmDesiredPitch" ID="6">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyUpperArm.RobotLowerArm.DesiredPitch</Value>
            </Property>
            <Property Name="NewValue">(180 / Math.PI) * Math.Acos((MyLowerArm.RobotUpperArm.EffectiveLength ^ 2 + MyUpperArm.RobotLowerArm.EffectiveLength ^ 2 - Reach ^ 2) / (2 * MyLowerArm.RobotUpperArm.EffectiveLength * MyUpperArm.RobotLowerArm.EffectiveLength)) - 180 + MyLowerArm.RobotUpperArm.DesiredPitch</Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="WithinReach" ID="7">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Reach &lt;= MyLowerArm.RobotUpperArm.EffectiveLength + MyUpperArm.RobotLowerArm.EffectiveLength</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
          <Exit Name="False" Type="Alternate" NextID="8" />
        </Step>
        <Step Type="Notify" Name="OutOfReach" ID="8">
          <Properties>
            <Property Name="NotificationType">Error</Property>
            <Property Name="MessageHeading">"Out of Reach"</Property>
            <Property Name="MessageContent">"The robot destination is out of reach."</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="SetArmLocations" BeginStepID="2" Description="Compute the lower and upper arm and robot locations based on the current headings.">
      <Properties />
      <Steps>
        <Step Type="Assign" Name="Variables" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CosPitchLower</Value>
            </Property>
            <Property Name="NewValue">Math.Cos(MyLowerArm.Movement.Pitch * Math.PI / 180) </Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>SinPitchLower</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sin(MyLowerArm.Movement.Pitch * Math.PI / 180) </Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CosPitchUpper</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Cos(MyUpperArm.Movement.Pitch * Math.PI / 180) </Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>SinPitchUpper</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sin(MyUpperArm.Movement.Pitch * Math.PI / 180) </Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CosHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Cos((CurrentHeading - 90) * Math.PI / 180)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>SinHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sin((CurrentHeading - 90) * Math.PI / 180)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.RobotUpperArm.EffectiveFloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CosPitchLower * MyLowerArm.RobotUpperArm.EffectiveLength</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.RobotUpperArm.MidPointOffsetFloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CosPitchLower * MyLowerArm.RobotUpperArm.MidPointOffset</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.RobotLowerArm.EffectiveFloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CosPitchUpper * MyUpperArm.RobotLowerArm.EffectiveLength</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.RobotLowerArm.MidPointOffsetFloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">CosPitchUpper * MyUpperArm.RobotLowerArm.MidPointOffset</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.RobotLowerArm.RobotVerticalOffsetFloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">-MyUpperArm.RobotLowerArm.HandVerticalOffset * Size.Length * SinPitchUpper</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>CosOffsetHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Cos(CurrentHeading * Math.PI / 180) </Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>SinOffsetHeading</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.Sin(CurrentHeading*Math.PI/180)</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyHand.RobotHand.MidPointOffsetFloorLength</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyHand.RobotHand.MidPointOffset * CosPitchHand</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Assign" Name="LowerArmLocation" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyLowerArm.Movement.X</Value>
            </Property>
            <Property Name="NewValue">ArmBaseX + MyLowerArm.RobotUpperArm.MidPointOffsetFloorLength * CosHeading + MyLowerArm.RobotUpperArm.LateralOffset * Size.Length * CosOffsetHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.Movement.Y</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ArmBaseY + MyLowerArm.RobotUpperArm.MidPointOffset * SinPitchLower</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.Movement.Z</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ArmBaseZ + MyLowerArm.RobotUpperArm.MidPointOffsetFloorLength * SinHeading + MyLowerArm.RobotUpperArm.LateralOffset * Size.Length * SinOffsetHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.RobotUpperArm.EndJointX</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ArmBaseX + (MyLowerArm.RobotUpperArm.EffectiveFloorLength) * CosHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.RobotUpperArm.EndJointY</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ArmBaseY + MyLowerArm.RobotUpperArm.EffectiveLength * SinPitchLower</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyLowerArm.RobotUpperArm.EndJointZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">ArmBaseZ + (MyLowerArm.RobotUpperArm.EffectiveFloorLength) * SinHeading</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="4" />
        </Step>
        <Step Type="Assign" Name="UpperArmLocation" ID="4">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyUpperArm.Movement.X</Value>
            </Property>
            <Property Name="NewValue">MyLowerArm.RobotUpperArm.EndJointX + MyUpperArm.RobotLowerArm.MidPointOffsetFloorLength * CosHeading + MyUpperArm.RobotLowerArm.LateralOffset * Size.Length * CosOffsetHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.Movement.Y</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyLowerArm.RobotUpperArm.EndJointY + MyUpperArm.RobotLowerArm.MidPointOffset * SinPitchUpper</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.Movement.Z</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyLowerArm.RobotUpperArm.EndJointZ + MyUpperArm.RobotLowerArm.MidPointOffsetFloorLength * SinHeading + MyUpperArm.RobotLowerArm.LateralOffset * Size.Length * SinOffsetHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.RobotLowerArm.EndJointX</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyLowerArm.RobotUpperArm.EndJointX + (MyUpperArm.RobotLowerArm.EffectiveFloorLength + MyUpperArm.RobotLowerArm.RobotVerticalOffsetFloorLength) * CosHeading</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.RobotLowerArm.EndJointY</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyLowerArm.RobotUpperArm.EndJointY + MyUpperArm.RobotLowerArm.EffectiveLength * SinPitchUpper + MyUpperArm.RobotLowerArm.HandVerticalOffset * Size.Length * CosPitchUpper</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyUpperArm.RobotLowerArm.EndJointZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyLowerArm.RobotUpperArm.EndJointZ + (MyUpperArm.RobotLowerArm.EffectiveFloorLength + MyUpperArm.RobotLowerArm.RobotVerticalOffsetFloorLength) * SinHeading</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Assign" Name="HandLocation" ID="5">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyHand.Movement.X</Value>
            </Property>
            <Property Name="NewValue">MyUpperArm.RobotLowerArm.EndJointX + MyHand.RobotHand.MidPointOffsetFloorLength * CosHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyHand.Movement.Y</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyUpperArm.RobotLowerArm.EndJointY + MyHand.RobotHand.MidPointOffset * SinPitchHand</Property>
                </Properties>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyHand.Movement.Z</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">MyUpperArm.RobotLowerArm.EndJointZ + MyHand.RobotHand.MidPointOffsetFloorLength * SinHeading</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
        </Step>
        <Step Type="Assign" Name="ArmBaseLocation" ID="6">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ArmBaseX</Value>
            </Property>
            <Property Name="NewValue">BaseX + MyRotator.RobotRotator.JointRadialOffset *Size.Length * CosHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>ArmBaseZ</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">BaseZ + MyRotator.RobotRotator.JointRadialOffset*Size.Length * SinHeading</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="RotatorLocation" ID="7">
          <Properties>
            <Property Name="StateVariableName">
              <Value>MyRotator.RobotRotator.Movement.X</Value>
            </Property>
            <Property Name="NewValue">BaseX + MyRotator.RobotRotator.RotationalOffsetX*Size.Length * CosHeading + MyRotator.RobotRotator.RotationalOffsetZ *Size.Length* SinHeading</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>MyRotator.RobotRotator.Movement.Z</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">BaseZ + MyRotator.RobotRotator.RotationalOffsetZ *Size.Length* CosHeading + MyRotator.RobotRotator.RotationalOffsetX *Size.Length* SinHeading</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="6" />
        </Step>
      </Steps>
    </Process>
  </Processes>
  <External>
    <Graphics>
      <SymbolInstance Center="-0.00296354932990006 6.84656433480633E-17 0.00227702208106811" Scale="0.201802995812707" ExternallyVisible="True">
        <SymbolRef Id="b9458f2e-b3b6-4c56-b892-aa638307a70d" />
      </SymbolInstance>
      <PadBoundingBoxForSymbol Value="True" />
      <OffsetDynamicRelativeToExternalBounds Value="False" />
    </Graphics>
  </External>
  <SaveHistories>
    <SaveHistory SavedDateTime="2022-04-08T16:34:29" ProductVersion="14.237.26883.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-04-15T17:20:18" ProductVersion="14.238.26915.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-04-27T21:20:09" ProductVersion="14.238.27085.0" Edition="RPS" />
  </SaveHistories>
  <Graphics>
    <AnimationSetup MinimumNumberOfFramesToDisplayIdleAnimation="10" />
  </Graphics>
</Fragment>
<!-- IJddHDZQrec74LYublasdNvtBHOM+5gORzMnl7qt8P0S8jX4jSp67CYxl0F1z+IdxOj2lrJ2IsptWh6mQSgMyA== -->