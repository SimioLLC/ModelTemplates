<Fragment>
  <Compatibility ParseElementFunctionsInExpressionsLast="True" ParseNonEntityAssociatedObjectForPropertyReference="False" AllowInteractiveEntryOfNonStandardElementNames="False" ParsePropertiesForObjectTypeForAutoCreatedObjectsFirst="False" />
  <Lists>
    <StringList Name="FreeSpaceSteeringBehaviorType">
      <Items>
        <Item Value="DirectToDestination" />
        <Item Value="FollowNetworkPathIfPossible" />
      </Items>
    </StringList>
  </Lists>
  <PropertyDefinitions>
    <Categories>
      <Category Name="Travel Logic" Description="Travel Logic" />
      <Category Name="Routing Logic" Description="Routing Logic" />
      <Category Name="Financials" Description="Financials" InitiallyExpanded="False" />
      <Category Name="Population" Description="Population" InitiallyExpanded="False" />
      <Category Name="Advanced Options" Description="Advanced Options" InitiallyExpanded="False" />
    </Categories>
    <ListProperty Name="FreeSpaceSteeringBehavior" DisplayName="Free Space Steering Behavior" Description="The behavior used to steer an entity of this type when traveling in free space to a destination.&#xD;&#xA;&#xD;&#xA;'Direct To Destination' will steer an entity in a straight line to its destination.&#xD;&#xA;&#xD;&#xA;'Follow Network Path If Possible' will prefer to steer an entity along a path following its currently assigned network, staying within the boundaries of the drawn path width. However, if no followable network path exists to the entity's destination then the entity will be steered in a straight line. Note: In order to use this steering behavior, make sure the entity's travel mode is set to 'Free Space Only'." ComplexityLevel="Advanced" Category="Travel Logic" DefaultValue="Follow Network Path If Possible" NullString="null" List="FreeSpaceSteeringBehaviorType">
      <Captions>
        <Caption Value="DirectToDestination" Display="Direct To Destination" />
        <Caption Value="FollowNetworkPathIfPossible" Display="Follow Network Path If Possible" />
      </Captions>
    </ListProperty>
    <ExpressionProperty Name="FreeSpaceSteeringUpdateInterval" DisplayName="Update Interval" Description="The time interval between steering adjustments to maintain adherence to the network path and avoid collisions." Category="Travel Logic" DefaultValue="0.1" Parent="FreeSpaceSteeringBehavior" NullString="null" UnitType="Time" DefaultUnits="Seconds">
      <Switch Property="FreeSpaceSteeringBehavior" Value="FollowNetworkPathIfPossible" />
    </ExpressionProperty>
    <BooleanProperty Name="FreeSpaceSteeringAvoidCollisions" DisplayName="Avoid Collisions" Description="Indicates whether the steering behavior will attempt to avoid collisions with other entities that are following the same network path." Category="Travel Logic" DefaultValue="False" Parent="FreeSpaceSteeringBehavior" NullString="null">
      <Switch Property="FreeSpaceSteeringBehavior" Value="FollowNetworkPathIfPossible" />
    </BooleanProperty>
    <ExpressionProperty Name="LogXZObservations" DefaultValue="LogXZObservations" NullString="null" />
    <ExpressionProperty Name="LogXZTimeInterval" DefaultValue="LogXZTimeInterval" NullString="null" UnitType="Time" />
    <Overrides>
      <Override Name="ResourceIdleCostRate" Visible="True" />
      <Override Name="ResourceCostPerUse" Visible="True" />
      <Override Name="ResourceUsageCostRate" Visible="True" />
      <Override Name="LogResourceUsage" Visible="True" />
      <Override Name="DisplayName" DefaultValue="ModelEntity.DisplayString" />
      <Override Name="DisplayCategory" Visible="True" />
      <Override Name="DisplayColor" Visible="True" />
      <Override Name="IncludeInPlanResourceConstraints" Visible="True" />
      <Override Name="CapacityType" Visible="True" />
      <Override Name="InitialWorkSchedule" Visible="True" />
      <Override Name="WorkDayExceptions" Visible="True" DefaultValue="0 Rows" />
      <Override Name="WorkPeriodExceptions" Visible="True" DefaultValue="0 Rows" />
      <Override Name="InitialCapacity" Visible="True" />
      <Override Name="RankingRule" Visible="True" />
      <Override Name="RankingExpression" Visible="True" />
      <Override Name="DynamicSelectionRule" Visible="True" />
      <Override Name="CurrentSizeIndex" DefaultValue="ModelEntity.Picture" />
      <Override Name="InitialDesiredSpeed" DefaultValue="1.4" />
      <Override Name="InitialTravelMode" DefaultValue="Network If Possible" />
      <Override Name="DueDateExpression" DefaultValue="ModelEntity.DueDate" />
    </Overrides>
  </PropertyDefinitions>
  <States>
    <DiscreteState Name="Picture" Description="A utility state to hold a picture index. This state can then be referenced in an expression for Current Symbol Index." />
    <StringState Name="Animation" Description="A utility state to hold the name of an animation. This state can then be referenced in an expression for Current Animation Index." />
    <StringState Name="MOIdBOMLevel" Description="Captures the BOM Level of a multi-level BOM" />
    <ElementReferenceState Name="ParentEntity" Description="Used in the route controller concept to link the child entity to its parent entity." ElementType="Entity" />
    <ElementReferenceState Name="ToLocation" Description="Location Where To Move The ModelEntity or CarrierEntity.  Mapped from Phase table." ElementType="Node" />
    <BooleanState Name="DestroyEntity" Description="Used During The LastPhase in the LastOperation to destroy entity once phase is completed." />
    <StringState Name="OperationName" Description="Current OperationName of ModelEntity.  Mapped from the OperationName on Operations table." />
    <StringState Name="DisplayString" Description="This is used to define the display name (owner name) of the ModelEntity." />
    <DateTimeState Name="DueDate" Description="Maps the DueDate from the Sales Orders / Ancelllary Orders to the ModelEntity." />
    <StringState Name="PhaseKey" Description="Current PhaseKey of ModelEntity.  Mapped from the PhaseKey on the Phases table." />
    <BooleanState Name="LastOperation" Description="Used to flag the ModelEntity that it is on its last operation for the order." />
    <StringState Name="SequenceNumber" />
    <StringState Name="LoopbackSequenceNumber" />
    <IntegerState Name="MORowCount" />
    <IntegerState Name="ParallelSequence" />
    <ElementReferenceState Name="VehicleDriver" ElementType="Object" />
    <StringState Name="MOId" />
    <StringState Name="TriggeringCOId" />
    <BooleanState Name="FromManufacturingOrder" />
    <BooleanState Name="SkipPhase" />
    <ElementReferenceState Name="SourceEntity" ElementType="Entity" />
    <ElementReferenceState Name="MustUseServer" ElementType="Object" />
    <IntegerState Name="AlternatePath" />
    <IntegerState Name="StartingAlternatePath" />
    <ElementReferenceState Name="CurrentMaterial" ElementType="Material" />
    <StringState Name="MaterialClass" />
    <DiscreteState Name="CurrentX" />
    <DiscreteState Name="CurrentZ" />
    <IntegerState Name="RowNumber" />
    <DateTimeState Name="StartDate" />
    <StringState Name="SOId" />
    <ElementReferenceState Name="StageMaterialLocation" ElementType="Object" />
    <BooleanState Name="LastBikeForSO" />
    <ElementReferenceState Name="InventoryLocation" ElementType="Inventory" />
    <BooleanState Name="UseVehicle" />
    <ElementReferenceState Name="AssignedVehicle" ElementType="Transporter" />
  </States>
  <Events>
    <Event Name="OperationFinished" />
    <Event Name="NextOperationStarted" />
  </Events>
  <Elements>
    <Element Type="Monitor" Name="AlternatePathMonitor" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>AlternatePath</Value>
        </Property>
        <Property Name="CrossingDirection">Negative</Property>
        <Property Name="InitialThresholdValue">1</Property>
        <Property Name="TriggeredProcessName">
          <Value>AlternatePath_TriggeredProcessName</Value>
        </Property>
      </Properties>
    </Element>
    <Element Type="StateStatistic" Name="CurrentXSS" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>CurrentX</Value>
        </Property>
        <Property Name="LogObservations">LogXZObservations</Property>
      </Properties>
    </Element>
    <Element Type="StateStatistic" Name="CurrentZSS" Scope="Public">
      <Properties>
        <Property Name="StateVariableName">
          <Value>CurrentZ</Value>
        </Property>
        <Property Name="LogObservations">LogXZObservations</Property>
      </Properties>
    </Element>
    <Element Type="Timer" Name="LogXZTimeIntervalTimer" Scope="Public">
      <Properties>
        <Property Name="TimeInterval" Units="Minutes">LogXZTimeInterval</Property>
      </Properties>
    </Element>
  </Elements>
  <Processes>
    <Process Name="OnCreated" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnCreated" BeginStepID="4">
      <Properties />
      <Steps>
        <Step Type="Execute" Name="RecordCurrentXandZ" ID="2">
          <Properties>
            <Property Name="ProcessName">
              <Value>RecordCurrentXandZ</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Decide" Name="T LogXZObservations" ID="3">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">LogXZObservations == True</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="5" />
        </Step>
        <Step Type="Assign" Name="LogXZTimeIntervalTimer.Enabled" ID="4">
          <Properties>
            <Property Name="StateVariableName">
              <Value>LogXZTimeIntervalTimer.Enabled</Value>
            </Property>
            <Property Name="NewValue">LogXZObservations</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Delay" Name="Epsilon" ID="5">
          <Properties>
            <Property Name="DelayTime">Math.Epsilon</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="2" />
        </Step>
      </Steps>
    </Process>
    <Process Name="OnDestroying" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnDestroying" BeginStepID="2">
      <Properties />
      <Steps>
        <Step Type="Fire" Name="OperationFinished" ID="2">
          <Properties>
            <Property Name="EventName">OperationFinished</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Execute" Name="RecordCurrentXandZ" ID="3">
          <Properties>
            <Property Name="ProcessName">
              <Value>RecordCurrentXandZ</Value>
            </Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="OnEnteredFreeSpace" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Entity.OnEnteredFreeSpace" BeginStepID="2" ExcludedFromLimits="True">
      <Properties>
        <Property Name="TokenClassName">FreeSpaceSteeringToken</Property>
        <Property Name="TokenActionOnAssociatedObjectDestroyed">EndProcess</Property>
        <Property Name="TokenActionOnAssociatedObjectTransferRequested">EndProcess</Property>
      </Properties>
      <Steps>
        <Step Type="Assign" Name="OnEnteredFreeSpaceAssignments" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>FreeSpaceSteeringToken.EnteredFreeSpaceFromNode</Value>
            </Property>
            <Property Name="NewValue">Math.If(PreviousNode != Nothing, DirectDistanceTo.Object(PreviousNode) == 0.0, False)</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Decide" Name="IfDestinationNode" ID="3">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">DestinationNode != Nothing</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="13" />
          <Exit Name="False" Type="Alternate" NextID="4" />
        </Step>
        <Step Type="Decide" Name="IfEnteredFreeSpaceFromNode" ID="4">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">FreeSpaceSteeringToken.EnteredFreeSpaceFromNode</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="6" />
          <Exit Name="False" Type="Alternate" NextID="5" />
        </Step>
        <Step Type="Assign" Name="MovementRate" ID="5">
          <Properties>
            <Property Name="StateVariableName">
              <Value>Movement.Rate</Value>
            </Property>
          </Properties>
        </Step>
        <Step Type="Assign" Name="GetNetworkPath" ID="6">
          <Properties>
            <Property Name="StateVariableName">
              <Value>FreeSpaceSteeringToken.NetworkPathNextLink</Value>
            </Property>
            <Property Name="NewValue">PreviousNode.OutboundLinks.SelectItemFor(Entity)</Property>
            <Property Name="Assignments">
              <Rows>
                <Properties>
                  <Property Name="AssignmentsStateVariableName">
                    <Value>FreeSpaceSteeringToken.NetworkPathNextNode</Value>
                  </Property>
                  <Property Name="AssignmentsNewValue">Math.If(FreeSpaceSteeringToken.NetworkPathNextLink != Nothing, Math.If(PreviousNode == FreeSpaceSteeringToken.NetworkPathNextLink.StartingNode, FreeSpaceSteeringToken.NetworkPathNextLink.EndingNode, FreeSpaceSteeringToken.NetworkPathNextLink.StartingNode), Nothing)</Property>
                </Properties>
              </Rows>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="7" />
        </Step>
        <Step Type="Decide" Name="IfNetworkPath" ID="7">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">FreeSpaceSteeringToken.NetworkPathNextLink != Nothing</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="12" />
          <Exit Name="False" Type="Alternate" NextID="8" />
        </Step>
        <Step Type="Decide" Name="IfNearestInputNode" ID="8">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">PreviousNode.Nearest.InputNode != Nothing</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="11" />
          <Exit Name="False" Type="Alternate" NextID="9" />
        </Step>
        <Step Type="Decide" Name="IfNearestNode" ID="9">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">PreviousNode.Nearest.Node != Nothing</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="10" />
          <Exit Name="False" Type="Alternate" NextID="5" />
        </Step>
        <Step Type="SetNode" Name="ToNearestNode" ID="10">
          <Properties>
            <Property Name="NodeName">PreviousNode.Nearest.Node</Property>
            <Property Name="AutoClearIfVisitDifferentNode">True</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="13" />
        </Step>
        <Step Type="SetNode" Name="ToNearestInputNode" ID="11">
          <Properties>
            <Property Name="NodeName">PreviousNode.Nearest.InputNode</Property>
            <Property Name="AutoClearIfVisitDifferentNode">True</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="13" />
        </Step>
        <Step Type="SetNode" Name="ToPathNextNode" ID="12">
          <Properties>
            <Property Name="NodeName">FreeSpaceSteeringToken.NetworkPathNextNode</Property>
            <Property Name="AutoClearIfVisitDifferentNode">True</Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="13" />
        </Step>
        <Step Type="Decide" Name="IfDirectToDestination" ID="13">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">Math.If(FreeSpaceSteeringBehavior == List.FreeSpaceSteeringBehaviorType.DirectToDestination || CurrentNetwork == Nothing || !FreeSpaceSteeringToken.EnteredFreeSpaceFromNode, True, !CurrentNetwork.PathExists(PreviousNode, DestinationNode))</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="15" />
          <Exit Name="False" Type="Alternate" NextID="14" />
        </Step>
        <Step Type="Travel" Name="FollowNetworkPath" ID="14">
          <Properties>
            <Property Name="SteeringBehavior" BehaviorGuid="6cbbbd77-ba6d-45d1-bcc7-0ed1bbd08ae8">
              <Value>Follow Network Path</Value>
              <Properties>
                <Property Name="NetworkName">
                  <Value>CurrentNetwork</Value>
                </Property>
                <Property Name="StartingNode">PreviousNode</Property>
                <Property Name="EndingNode">DestinationNode</Property>
                <Property Name="UpdateTimeInterval">FreeSpaceSteeringUpdateInterval</Property>
                <Property Name="AvoidCollisions">FreeSpaceSteeringAvoidCollisions</Property>
              </Properties>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="16" />
        </Step>
        <Step Type="Travel" Name="DirectToDestination" ID="15">
          <Properties>
            <Property Name="SteeringBehavior" BehaviorGuid="2b2ac6d5-73de-4ac8-bfc8-8b0ea2fdbe1e">
              <Value>Direct To Destination</Value>
              <Properties>
                <Property Name="DestinationObject">DestinationNode</Property>
                <Property Name="MaximumMovementRate">DesiredSpeed</Property>
              </Properties>
            </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="16" />
        </Step>
        <Step Type="Transfer" Name="ToDestinationNode" ID="16">
          <Properties>
            <Property Name="NodeName">DestinationNode</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="AlternatePath_TriggeredProcessName" BeginStepID="2">
      <Properties />
      <Steps>
        <Step Type="Decide" Name="Parent != Nothing" ID="2">
          <Properties>
            <Property Name="DecideType">ConditionBased</Property>
            <Property Name="ConditionOrProbability">ParentEntity != Nothing</Property>
          </Properties>
          <Exit Name="True" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="Copy Alternate Path to Parent" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>ParentEntity.ModelEntity.AlternatePath</Value>
            </Property>
            <Property Name="NewValue">AlternatePath</Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
    <Process Name="RecordCurrentXandZ" BeginStepID="2">
      <Properties>
        <Property Name="TriggeringEventName">LogXZTimeIntervalTimer.Event</Property>
      </Properties>
      <Steps>
        <Step Type="Assign" Name="CurrentX" ID="2">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentX</Value>
            </Property>
            <Property Name="NewValue">Math.Round( Location.X) </Property>
          </Properties>
          <Exit Name="Exit" Type="Primary" NextID="3" />
        </Step>
        <Step Type="Assign" Name="CurrentZ" ID="3">
          <Properties>
            <Property Name="StateVariableName">
              <Value>CurrentZ</Value>
            </Property>
            <Property Name="NewValue"> Math.Round(Location.Z * -1) </Property>
          </Properties>
        </Step>
      </Steps>
    </Process>
  </Processes>
  <Tokens>
    <Token Name="FreeSpaceSteeringToken">
      <States>
        <ElementReferenceState Name="NetworkPathNextLink" ElementType="Link" />
        <ElementReferenceState Name="NetworkPathNextNode" ElementType="Node" />
        <BooleanState Name="EnteredFreeSpaceFromNode" />
      </States>
    </Token>
  </Tokens>
  <External>
    <Graphics>
      <Polygon Center="0 0 0" Color="008000" YHeight="0.25" ExternallyVisible="True">
        <Points>
          <Point Location="-0.25 0 0.25" />
          <Point Location="-0.25 0 -0.25" />
          <Point Location="0.25 0 0" />
        </Points>
      </Polygon>
      <DefaultFlowMaterial>
        <MaterialRef Id="69b67927-df2f-45f0-9261-e6142cdfafbf" />
      </DefaultFlowMaterial>
      <PadBoundingBoxForSymbol Value="True" />
      <OffsetDynamicRelativeToExternalBounds Value="False" />
    </Graphics>
  </External>
  <SaveHistories>
    <SaveHistory SavedDateTime="2022-01-21T17:41:59" ProductVersion="14.234.25882.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-01-24T14:17:02" ProductVersion="14.234.25882.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-01T15:57:03" ProductVersion="14.234.25941.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-09T14:01:30" ProductVersion="14.235.26088.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-13T14:38:55" ProductVersion="14.235.26122.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-14T20:15:46" ProductVersion="14.235.26159.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-15T16:17:36" ProductVersion="14.235.26173.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-17T13:52:23" ProductVersion="14.235.26184.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-02-18T16:44:49" ProductVersion="14.235.26184.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-23T00:39:34" ProductVersion="14.235.26245.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-23T01:10:59" ProductVersion="14.235.26295.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-02-25T20:23:13" ProductVersion="14.235.26335.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-04-05T13:06:37" ProductVersion="14.237.26791.0" Edition="Internal" />
    <SaveHistory SavedDateTime="2022-04-06T16:24:21" ProductVersion="14.237.26861.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-07T20:46:42" ProductVersion="14.237.26870.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-11T21:24:51" ProductVersion="14.237.26883.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-15T13:50:35" ProductVersion="14.238.26931.0" Edition="RPS" />
    <SaveHistory SavedDateTime="2022-04-27T21:20:09" ProductVersion="14.238.27085.0" Edition="RPS" />
  </SaveHistories>
  <Graphics>
    <AnimationSetup MinimumNumberOfFramesToDisplayIdleAnimation="10" />
  </Graphics>
</Fragment>
<!-- CCMTk/Tq995jcd0XWBLUwyaTdqNiODiRJ2RIhtDVwnDBjocxKIvndDl64WC87yx/Q1eDonk0zedfsgFCSonYng== -->